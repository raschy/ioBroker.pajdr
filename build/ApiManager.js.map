{
  "version": 3,
  "sources": ["../src/ApiManager.ts"],
  "sourcesContent": ["import fs from 'fs';\nimport fetch from 'node-fetch'; // Ab Node 18 kannst du dies weglassen\nimport * as path from 'path';\n\ninterface TokenResponse {\n    success: {\n        token: string;\n        expires_in: number;\n        userID: number;\n    };\n}\n\nexport class ApiManager {\n    private email: string;\n    private password: string;\n    private tokenFilePath: string = 'token.txt';\n    private storedToken: string | null = null;\n    private tokenExpiry: number | null = null;\n\n    /**\n     *\n     */\n    constructor(email: string, password: string) {\n        this.email = email;\n        this.password = password;\n    }\n\n    /**\n     *\n     */\n    async getToken(): Promise<string> {\n        //const url = `https://connect.paj-gps.de/api/v1/login?email=${encodeURIComponent(this.email)}&password=${encodeURIComponent(this.password)}`;\n        const baseUrl = 'https://connect.paj-gps.de/api/v1/login?email=';\n        const urlBinder = '&password=';\n        const url = [baseUrl, encodeURIComponent(this.email), urlBinder, encodeURIComponent(this.password)].join('');\n        console.log(`[getToken] Url: ${url}`);\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Login failed: ${response.statusText}`);\n        }\n\n        const data: TokenResponse = (await response.json()) as TokenResponse;\n        this.storedToken = data.success.token;\n        this.tokenExpiry = Date.now() + data.success.expires_in * 1000;\n        console.log(this.tokenExpiry, this.timestampToDate(this.tokenExpiry));\n        return data.success.token;\n    }\n\n    /**\n     *\n     */\n    async saveToken(token: string): Promise<void> {\n        await fs.promises.writeFile(this.tokenFilePath, token, 'utf8');\n    }\n\n    /**\n     *\n     */\n    async loadToken(): Promise<string> {\n        try {\n            const token = await fs.promises.readFile(this.tokenFilePath, 'utf8');\n            this.storedToken = token;\n            return token;\n        } catch (error) {\n            throw new Error(`Token konnte nicht gelesen werden: ${(error as Error).message}`);\n        }\n    }\n\n    /**\n     *\n     */\n    async getCustomer(): Promise<number> {\n        const url = 'https://connect.paj-gps.de/api/v1/customer';\n        console.log(`[getCustomer] URL: ${url}`);\n\n        try {\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    Authorization: `Bearer ${this.storedToken}`,\n                    'Content-Type': 'application/json',\n                },\n            });\n            //console.log('RESPONSE: ', response);\n            //console.log('Status: ', response.status);\n\n            if (!response.ok) {\n                throw new Error(`[getCustomer] Datenabruf fehlgeschlagen: ${response.statusText}`);\n            }\n\n            const data: CustomerRaw = (await response.json()) as CustomerRaw;\n            //console.log('DATA: ', data);\n            const dataSuccess: Customer = data.success;\n            //console.log('SUCCESS', dataSuccess);\n            const userId: number = dataSuccess.id;\n            return userId;\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error('[getCustomer] Fehler:', error.message);\n                throw error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n            } else {\n                console.error('[getCustomer] Unbekannter Fehler:', error);\n                throw new Error('Unbekannter Fehler aufgetreten');\n            }\n        }\n    }\n\n    /**\n     *\n     */\n    async getDevice(): Promise<CarData[]> {\n        const url = 'https://connect.paj-gps.de/api/v1/device';\n        console.log(`[getDevice] URL: ${url}`);\n\n        try {\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    Authorization: `Bearer ${this.storedToken}`,\n                    'Content-Type': 'application/json',\n                },\n            });\n            //console.log('RESPONSE: ', response);\n\n            if (!response.ok) {\n                throw new Error(`[getDevice] Datenabruf fehlgeschlagen: ${response.statusText}`);\n            }\n            const data: CarDataRaw = (await response.json()) as CarDataRaw;\n            //console.log('RAW', data);\n            const dataSuccess: CarData[] = data.success;\n            //console.log('SUCCESS', dataSuccess);\n            //console.log(dataSuccess.length); // Access length property\n            //console.log(dataSuccess[0]); // Access the first element\n            return dataSuccess;\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error('[getDevice] Fehler:', error.message);\n                throw error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n            } else {\n                console.error('[getDevice] Unbekannter Fehler:', error);\n                throw new Error('Unbekannter Fehler aufgetreten');\n            }\n        }\n    }\n\n    /**\n     *\n     */\n    async getCarDeviceData(): Promise<CarData[]> {\n        const url = 'https://connect.paj-gps.de/api/v1/sdevice/car';\n        console.log(`[getCarDeviceData] URL: ${url}`);\n\n        try {\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    Authorization: `Bearer ${this.storedToken}`,\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error(`[getCarDeviceData] Datenabruf fehlgeschlagen: ${response.statusText}`);\n            }\n\n            const data: CarDataRaw = (await response.json()) as CarDataRaw;\n            //console.log('RAW', data);\n            const dataSuccess: CarData[] = data.success;\n            //console.log('SUCCESS', dataSuccess);\n            //console.log(dataSuccess.length); // Access length property\n            //console.log(dataSuccess[0]); // Access the first element\n            return dataSuccess;\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error('[getCarDeviceData] Fehler:', error.message);\n                throw error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n            } else {\n                console.error('[getCarDeviceData] Unbekannter Fehler:', error);\n                throw new Error('Unbekannter Fehler aufgetreten');\n            }\n        }\n    }\n\n    /**\n     *\n     */\n    async getSingleCarDeviceData(carId: number): Promise<CarData[]> {\n        //const url: string = 'https://connect.paj-gps.de/api/v1/sdevice/car/452';\n        const baseUrl = 'https://connect.paj-gps.de/api/v1/sdevice/car/';\n        const url = [baseUrl, carId].join('');\n        console.log(`[getSingleCarDeviceData] URL: ${url}`);\n\n        try {\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    Authorization: `Bearer ${this.storedToken}`,\n                    'Content-Type': 'application/json',\n                },\n            });\n            if (!response.ok) {\n                throw new Error(`[getSingleCarDeviceData] Datenabruf fehlgeschlagen: ${response.statusText}`);\n            }\n            const data: CarDataRaw = (await response.json()) as CarDataRaw;\n            //console.log('RAW', data);\n            const dataSuccess: CarData[] = data.success;\n            //console.log('SUCCESS', dataSuccess);\n            //console.log(dataSuccess.length); // Access length property\n            //console.log(dataSuccess[0]); // Access the first element\n            return dataSuccess;\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error('[getSingleCarDeviceData] Fehler:', error.message);\n                throw error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n            } else {\n                console.error('[getSingleCarDeviceData] Unbekannter Fehler:', error);\n                throw new Error('Unbekannter Fehler aufgetreten');\n            }\n        }\n    }\n\n    /**\n     *\n     */\n    async getGeofences(): Promise<GeoFence[]> {\n        const url = 'https://connect.paj-gps.de/api/v1/geofences';\n        console.log(`[getGeofences] URL: ${url}`);\n        //const body = { \"deviceIDs\": [1312315] };\n        //\n        //\t \"message\": \"The GET method is not supported for route api/v1/geofences. Supported methods: POST.\" >> 405\n        //\t \"message\": \"Server Error\" >> 500\n        //\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${this.storedToken}`,\n                },\n                body: '{ \"deviceIDs\": [1312315] }',\n            });\n            //console.log('RESPONSE', response);\n\n            if (!response.ok) {\n                throw new Error(`[getGeofences] Datenabruf fehlgeschlagen: ${response.statusText}`);\n            }\n\n            const data: GeoFencesRaw = (await response.json()) as GeoFencesRaw;\n            //console.log('GeoFencesRaw ', data);\n            const dataSuccess: GeoFence[] = data.success;\n\n            //console.log('SUCCESS', dataSuccess);\n            //console.log(dataSuccess.length); // Access length property\n            //console.log(dataSuccess[0]); // Access the first element\n            return dataSuccess;\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error('[getGeofences] Fehler:', error.message);\n                throw error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n            } else {\n                console.error('[getGeofences] Unbekannter Fehler:', error);\n                throw new Error('Unbekannter Fehler aufgetreten');\n            }\n        }\n    }\n\n    /**\n     *\n     */\n    async getRoute(deviceId: number, timestamp: number): Promise<any> {\n        const url = 'https://api.paj-gps.com/api/v1/route/export';\n        console.log(`[getRoute] URL: ${url}`);\n        const deviceArr: number[] = [];\n        deviceArr.push(deviceId);\n        //\n        const body = {\n            deviceId: deviceArr,\n            dateStart: timestamp / 1000,\n            dateEnd: timestamp / 1000 + 86399,\n            //lastMinutes: 30,\n            //lastPoints: 114,\n            rangeType: 'daterange',\n            type: 'pdf',\n            sort: 'asc',\n            translations: {\n                wayPoints: 'Wegpunkte',\n                signalFrom: 'Signal von',\n                showInGoogle: 'Position auf Google Maps anzeigen',\n                currentPosition: 'Aktuelle Position',\n                id: 'ID',\n                lat: 'Breitengrad',\n                lng: 'L\u00E4ngengrad',\n                dateTime: 'Uhrzeit',\n                battery: 'Batterie',\n                speed: 'Geschwindigkeit',\n                direction: 'Richtung',\n                positionLink: 'Link zur Position',\n            },\n            version: 'V2',\n        };\n        //console.log(`[getRoute] Body: ${JSON.stringify(body)}`);\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    accept: 'application/pdf',\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${this.storedToken}`,\n                },\n                body: JSON.stringify(body),\n            });\n\n            if (!response.ok) {\n                throw new Error(`[getRoute] Datenabruf fehlgeschlagen: ${response.statusText}`);\n            }\n            return response.arrayBuffer();\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error('[getRoute] Fehler:', error.message);\n                throw error;\n            } else {\n                console.error('[getRoute] Unbekannter Fehler:', error);\n                throw new Error('Unbekannter Fehler aufgetreten');\n            }\n        }\n    }\n\n    //https://connect.paj-gps.de/api/v1/logbook/getAllRoutes/2937042\n    /**\n     *\n     */\n    async getAllRoutes(deviceId: number): Promise<any> {\n        //\n        const baseUrl = 'https://connect.paj-gps.de/api/v1/logbook/getAllRoutes/';\n        const url = [baseUrl, deviceId].join('');\n        console.log(`[getAllRoutes] URL: ${url}`);\n\n        try {\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    Authorization: `Bearer ${this.storedToken}`,\n                    'Content-Type': 'application/json',\n                },\n            });\n            if (!response.ok) {\n                throw new Error(`[getAllRoutes] Datenabruf fehlgeschlagen: ${response.statusText}`);\n            }\n            const data: any = await response.json();\n            //console.log('RAW', data);\n            const dataSuccess: CarData[] = data.data;\n            //console.log('SUCCESS', dataSuccess);\n            //const keyCount = Object.keys(dataSuccess).length;\n            //console.log(keyCount); // Access length property\n            //console.log(dataSuccess[0]); // Access the first element\n            return dataSuccess;\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error('[getAllRoutes] Fehler:', error.message);\n                throw error;\n            } else {\n                console.error('[getAllRoutes] Unbekannter Fehler:', error);\n                throw new Error('Unbekannter Fehler aufgetreten');\n            }\n        }\n    }\n\n    //https://connect.paj-gps.de/api/v1/trackerdata/1312315/date_range?dateStart=1730970000000&dateEnd=1730970086399&wifi=1&gps=1\n    /**\n     *\n     */\n    async getTrackerData(deviceId: number, timestamp: number): Promise<Track[]> {\n        //\n        const baseUrl = 'https://connect.paj-gps.de/api/v1/trackerdata/';\n        //nst url = [baseUrl, deviceId, '/date_range?dateStart=1721772000&dateEnd=1722335247'].join('');\n        const url = [\n            baseUrl,\n            deviceId,\n            '/date_range?dateStart=',\n            timestamp / 1000,\n            '&dateEnd=',\n            timestamp / 1000 + 86399,\n            '&wifi=1&gps=1',\n        ].join('');\n        console.log(`[getTrackerData] URL: ${url}`);\n\n        try {\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    Authorization: `Bearer ${this.storedToken}`,\n                    'Content-Type': 'application/json',\n                },\n            });\n            if (!response.ok) {\n                throw new Error(`[getTrackerData] Datenabruf fehlgeschlagen: ${response.statusText}`);\n            }\n\n            const data: any = (await response.json()) as TracksRaw;\n            //console.log('RAW', data);\n            const dataSuccess: Track[] = data.success;\n            return dataSuccess;\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error('[getTrackerData] Fehler:', error.message);\n                throw error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n            } else {\n                console.error('[getTrackerData] Unbekannter Fehler:', error);\n                throw new Error('Unbekannter Fehler aufgetreten');\n            }\n        }\n    }\n\n    //https://connect.paj-gps.de/api/v1/trackerdata/1312315/last_points?lastPoints=10&gps=1&wifi=0\n    /**\n     *\n     */\n    async getTrackerDataLast(deviceId: number, points: number): Promise<Track[]> {\n        //\n        const baseUrl = 'https://connect.paj-gps.de/api/v1/trackerdata/';\n        const url = [baseUrl, deviceId, '/last_points?lastPoints=', points, '&wifi=0&gps=1'].join('');\n        console.log(`[getTrackerDataLast] URL: ${url}`);\n\n        try {\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    Authorization: `Bearer ${this.storedToken}`,\n                    'Content-Type': 'application/json',\n                },\n            });\n            if (!response.ok) {\n                throw new Error(`[getTrackerDataLast] Datenabruf fehlgeschlagen: ${response.statusText}`);\n            }\n\n            const data: any = (await response.json()) as TracksRaw;\n            //console.log('RAW', data);\n            const dataSuccess: Track[] = data.success;\n            return dataSuccess;\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error('[getTrackerDataLast] Fehler:', error.message);\n                throw error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n            } else {\n                console.error('[getTrackerDataLast] Unbekannter Fehler:', error);\n                throw new Error('Unbekannter Fehler aufgetreten');\n            }\n        }\n    }\n\n    //######\n    /**\n     *\n     */\n    async getNotifications(carId: number, alertType: number): Promise<any> {\n        //https://connect.paj-gps.de/api/v1/notifications/1312315?alertType=5&isRead=1\n        const baseUrl = 'https://connect.paj-gps.de/api/v1/notifications/';\n        const url = [baseUrl, carId, '?alertType=', alertType, '&isRead=0'].join('');\n        console.log(`[getNotifications] URL: ${url}`);\n        try {\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    Authorization: `Bearer ${this.storedToken}`,\n                    'Content-Type': 'application/json',\n                },\n            });\n            if (!response.ok) {\n                throw new Error(`[getNotifications] Datenabruf fehlgeschlagen: ${response.statusText}`);\n            }\n            const data: CarDataRaw = (await response.json()) as CarDataRaw;\n            //console.log('RAW', data);\n            const dataSuccess: CarData[] = data.success;\n            //console.log('SUCCESS', dataSuccess);\n            //console.log(dataSuccess.length); // Access length property\n            //console.log(dataSuccess[0]); // Access the first element\n            return dataSuccess;\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error('[getNotifications] Fehler:', error.message);\n                throw error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n            } else {\n                console.error('[getNotifications] Unbekannter Fehler:', error);\n                throw new Error('Unbekannter Fehler aufgetreten');\n            }\n        }\n    }\n\n    //https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=1312315&startDate=1731715200&endDate=1731801500&dsType=mixTR\n    /**\n     *\n     */\n    async getPdf_new(deviceId: number): Promise<Buffer> {\n        const url =\n            'https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=1312315&startDate=1731715200&endDate=1731801500&dsType=mixTR';\n\n        console.log(`[getPdf] URL: ${url} ${deviceId}`);\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/pdf',\n                    Authorization: `Bearer ${this.storedToken}`,\n                },\n            });\n            //console.log(response);\n\n            if (!response.ok) {\n                throw new Error(`[getPdf] Datenabruf fehlgeschlagen: ${response.statusText}`);\n            }\n\n            //const blob = await response.blob();\n            //console.log('Blob', blob);\n            //const pdfData = await blob.arrayBuffer();\n\n            // Pfad zur Ausgabedatei erstellen\n            const filePath = 'pajDemo2.pdf';\n            const outputPath = path.resolve(filePath);\n            console.log('Output Path', outputPath);\n\n            const pdfBuffer = await response.buffer();\n\n            // Schreiben der PDF-Daten in eine Datei\n            fs.promises.writeFile(outputPath, Buffer.from(pdfBuffer));\n\n            return pdfBuffer;\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error('[getPdf] Fehler:', error.message);\n                throw error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n            } else {\n                console.error('[getPdf] Unbekannter Fehler:', error);\n                throw new Error('Unbekannter Fehler aufgetreten');\n            }\n        }\n    }\n\n    // https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=1287648&startDate=1721772000&endDate=1721858400&dsType=mixTR\n    /**\n     *\n     */\n    async getPdf_X(deviceId: number): Promise<Buffer> {\n        //\n        const baseUrl = 'https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=';\n        //const tempUrl = '&startDate=1721772000&endDate=1721858399';\n        const tempUrl = '&startDate=1731715200&endDate=1731801599';\n        const typeUrl = '&dsType=mixTR';\n        const url = [baseUrl, deviceId, tempUrl, typeUrl].join('');\n        //const url = 'https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=1312315&startDate=1721800740&endDate=1721854740&dsType=mixTR';\n\n        console.log(`[getPdf] URL: ${url}`);\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    Accept: 'application/pdf',\n                    Authorization: `Bearer ${this.storedToken}`,\n                },\n            });\n            //console.log(response);\n\n            if (!response.ok) {\n                throw new Error(`[getPdf] Datenabruf fehlgeschlagen: ${response.statusText}`);\n            }\n\n            //const blob = await response.blob();\n            //console.log('Blob', blob);\n            //const pdfData = await blob.arrayBuffer();\n\n            // Pfad zur Ausgabedatei erstellen\n            const filePath = 'pajDemo2.pdf';\n            const outputPath = path.resolve(filePath);\n            console.log('Output Path', outputPath);\n\n            const pdfBuffer = await response.buffer();\n\n            // Schreiben der PDF-Daten in eine Datei\n            fs.promises.writeFile(outputPath, Buffer.from(pdfBuffer));\n\n            return pdfBuffer;\n        } catch (error: unknown) {\n            if (error instanceof Error) {\n                console.error('[getPdf] Fehler:', error.message);\n                throw error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n            } else {\n                console.error('[getPdf] Unbekannter Fehler:', error);\n                throw new Error('Unbekannter Fehler aufgetreten');\n            }\n        }\n    }\n\n    /**\n     *\n     */\n    async getPdf(deviceId: number, timestamp: number): Promise<ArrayBuffer> {\n        const baseUrl = 'https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=';\n        //\n        const url = [\n            baseUrl,\n            deviceId,\n            '&startDate=',\n            timestamp / 1000,\n            '&endDate=',\n            timestamp / 1000 + 86399,\n            '&dsType=mixTR',\n        ].join('');\n        console.log(`[getPdf] URL: ${url}`);\n        //console.log('Gespeicherter Token:', this.storedToken);\n        //\n        //const body = { deviceIDs: [1312315] };\n        const body = {\n            deviceId: [1312315],\n            dateStart: 1721772000,\n            dateEnd: 1721858399,\n            lastMinutes: 30,\n            lastPoints: 114,\n            rangeType: 'daterange',\n            type: 'pdf',\n            sort: 'asc',\n            translations: {\n                wayPoints: 'Wegpunkte',\n                signalFrom: 'Signal von',\n                showInGoogle: 'Position auf Google Maps anzeigen',\n                currentPosition: 'Aktuelle Position',\n                id: 'ID',\n                lat: 'Breitengrad',\n                lng: 'L\u00E4ngengrad',\n                dateTime: 'Uhrzeit',\n                battery: 'Batterie',\n                speed: 'Geschwindigkeit',\n                direction: 'Richtung',\n                positionLink: 'Link zur Position',\n            },\n            version: 'V2',\n        };\n        body.dateStart = timestamp / 1000;\n        body.dateEnd = timestamp / 1000 + 86399;\n\n        //try {\n        console.log(body);\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                accept: 'application/pdf',\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${this.storedToken}`,\n            },\n            //body: JSON.stringify(body),\n        });\n        //console.log('RESPONSE', response);\n\n        //const errorText = await response.text();\n        //console.log('ErrorText', errorText);\n        return response.arrayBuffer();\n\n        //const pdfBuffer = await response.buffer();\n\n        if (!response.ok) {\n            throw new Error(`[getGeofences] Datenabruf fehlgeschlagen: ${response.statusText}`);\n        }\n\n        /*\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getGeofences] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getGeofences] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n*/\n    }\n\n    /**\n     *\n     */\n    async getPdf_old(deviceId: number): Promise<ArrayBuffer> {\n        const baseUrl = 'https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=';\n        const tempUrl = '&startDate=1720994400&endDate=1721080800';\n        const typeUrl = '&dsType=mixTR';\n        const url = [baseUrl, deviceId, tempUrl, typeUrl].join('');\n        console.log(`[getPDF] URL: ${url}`);\n        //\n        const body = {\n            deviceId: [1312315],\n            dateStart: 1721772000,\n            dateEnd: 1721858399,\n            lastMinutes: 30,\n            lastPoints: 114,\n            rangeType: 'daterange',\n            type: 'pdf',\n            sort: 'asc',\n            translations: {\n                wayPoints: 'Wegpunkte',\n                signalFrom: 'Signal von',\n                showInGoogle: 'Position auf Google Maps anzeigen',\n                currentPosition: 'Aktuelle Position',\n                id: 'ID',\n                lat: 'Breitengrad',\n                lng: 'L\u00E4ngengrad',\n                dateTime: 'Uhrzeit',\n                battery: 'Batterie',\n                speed: 'Geschwindigkeit',\n                direction: 'Richtung',\n                positionLink: 'Link zur Position',\n            },\n            version: 'V2',\n        };\n        body.dateStart = 1720908000;\n        body.dateEnd = 1720994000;\n\n        //try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                accept: 'application/pdf',\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${this.storedToken}`,\n            },\n            //body: JSON.stringify(body),\n        });\n        //console.log('RESPONSE', response);\n\n        //const errorText = await response.text();\n        //console.log('ErrorText', errorText);\n        return response.arrayBuffer();\n\n        //const pdfBuffer = await response.buffer();\n\n        if (!response.ok) {\n            throw new Error(`[getGeofences] Datenabruf fehlgeschlagen: ${response.statusText}`);\n        }\n\n        /*\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getGeofences] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getGeofences] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n*/\n    }\n\n    // Helper\n    /**\n     *\n     */\n    timestampToDateDE(unixTimestamp: number): string {\n        const date = new Date(unixTimestamp);\n        return date.toLocaleString('de-DE');\n    }\n\n    /**\n     *\n     */\n    timestampToDate(unixTimestamp: number): Date {\n        console.log(unixTimestamp);\n        return new Date(unixTimestamp);\n    }\n\n    /**\n     *\n     */\n    todayTimestamp(): number {\n        const today = new Date().toISOString().slice(0, -14);\n        return new Date(today).getTime();\n    }\n\n    /**\n     *\n     */\n    datestringToTimestamp(d: string): number {\n        const val = d.split('-');\n        const _year = parseInt(val[0]);\n        const _month = parseInt(val[1]);\n        const _date = parseInt(val[2]);\n        //console.log(`${_date} ${_month} ${_year} `);\n        //\n        //const summerOffset = Math.abs(new Date().getTimezoneOffset() / 60);\n        //const calculatedDate = new Date(_year, _month - 1, _date, summerOffset, 0, 0, 0);\n        const calculatedDate = new Date(_year, _month - 1, _date, 0, 0, 0, 0);\n        return calculatedDate.getTime();\n    }\n\n    /**\n     *\n     */\n    formatDate(d: Date): string {\n        const year = d.getFullYear();\n        const month = (d.getMonth() + 1).toString().padStart(2, '0');\n        const day = d.getDate().toString().padStart(2, '0');\n        return `${year}-${month}-${day}`;\n    }\n}\n"],
  "mappings": "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",
  "names": ["fetch", "fs"]
}
