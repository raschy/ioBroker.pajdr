{
  "version": 3,
  "sources": ["../src/ApiManager.ts"],
  "sourcesContent": ["import fs from 'fs';\nimport fetch from 'node-fetch'; // Ab Node 18 kannst du dies weglassen\nimport * as path from 'path';\n\ninterface TokenResponse {\n\tsuccess: {\n\t\ttoken: string;\n\t\texpires_in: number;\n\t\tuserID: number;\n\t};\n}\n\nexport class ApiManager {\n\tprivate email: string;\n\tprivate password: string;\n\tprivate tokenFilePath: string = 'token.txt';\n\tprivate storedToken: string | null = null;\n\tprivate tokenExpiry: number | null = null;\n\n\t/**\n\t *\n\t */\n\tconstructor(email: string, password: string) {\n\t\tthis.email = email;\n\t\tthis.password = password;\n\t}\n\n\t/**\n\t *\n\t */\n\tasync getToken(): Promise<string> {\n\t\t//const url = `https://connect.paj-gps.de/api/v1/login?email=${encodeURIComponent(this.email)}&password=${encodeURIComponent(this.password)}`;\n\t\tconst baseUrl = 'https://connect.paj-gps.de/api/v1/login?email=';\n\t\tconst urlBinder = '&password=';\n\t\tconst url = [baseUrl, encodeURIComponent(this.email), urlBinder, encodeURIComponent(this.password)].join('');\n\t\tconsole.log(`[getToken] Url: ${url}`);\n\t\tconst response = await fetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`Login failed: ${response.statusText}`);\n\t\t}\n\n\t\tconst data: TokenResponse = (await response.json()) as TokenResponse;\n\t\tthis.storedToken = data.success.token;\n\t\tthis.tokenExpiry = Date.now() + data.success.expires_in * 1000;\n\t\tconsole.log(this.tokenExpiry, this.timestampToDate(this.tokenExpiry));\n\t\treturn data.success.token;\n\t}\n\n\t/**\n\t *\n\t */\n\tasync saveToken(token: string): Promise<void> {\n\t\tawait fs.promises.writeFile(this.tokenFilePath, token, 'utf8');\n\t}\n\n\t/**\n\t *\n\t */\n\tasync loadToken(): Promise<string> {\n\t\ttry {\n\t\t\tconst token = await fs.promises.readFile(this.tokenFilePath, 'utf8');\n\t\t\tthis.storedToken = token;\n\t\t\treturn token;\n\t\t} catch (error) {\n\t\t\tthrow new Error(`Token konnte nicht gelesen werden: ${(error as Error).message}`);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t */\n\tasync getCustomer(): Promise<number> {\n\t\tconst url = 'https://connect.paj-gps.de/api/v1/customer';\n\t\tconsole.log(`[getCustomer] URL: ${url}`);\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\t\t\t//console.log('RESPONSE: ', response);\n\t\t\t//console.log('Status: ', response.status);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getCustomer] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t\t}\n\n\t\t\tconst data: CustomerRaw = (await response.json()) as CustomerRaw;\n\t\t\t//console.log('DATA: ', data);\n\t\t\tconst dataSuccess: Customer = data.success;\n\t\t\t//console.log('SUCCESS', dataSuccess);\n\t\t\tconst userId: number = dataSuccess.id;\n\t\t\treturn userId;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getCustomer] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getCustomer] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t */\n\tasync getDevice(): Promise<CarData[]> {\n\t\tconst url = 'https://connect.paj-gps.de/api/v1/device';\n\t\tconsole.log(`[getDevice] URL: ${url}`);\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\t\t\t//console.log('RESPONSE: ', response);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getDevice] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t\t}\n\t\t\tconst data: CarDataRaw = (await response.json()) as CarDataRaw;\n\t\t\t//console.log('RAW', data);\n\t\t\tconst dataSuccess: CarData[] = data.success;\n\t\t\t//console.log('SUCCESS', dataSuccess);\n\t\t\t//console.log(dataSuccess.length); // Access length property\n\t\t\t//console.log(dataSuccess[0]); // Access the first element\n\t\t\treturn dataSuccess;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getDevice] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getDevice] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t */\n\tasync getCarDeviceData(): Promise<CarData[]> {\n\t\tconst url = 'https://connect.paj-gps.de/api/v1/sdevice/car';\n\t\tconsole.log(`[getCarDeviceData] URL: ${url}`);\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getCarDeviceData] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t\t}\n\n\t\t\tconst data: CarDataRaw = (await response.json()) as CarDataRaw;\n\t\t\t//console.log('RAW', data);\n\t\t\tconst dataSuccess: CarData[] = data.success;\n\t\t\t//console.log('SUCCESS', dataSuccess);\n\t\t\t//console.log(dataSuccess.length); // Access length property\n\t\t\t//console.log(dataSuccess[0]); // Access the first element\n\t\t\treturn dataSuccess;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getCarDeviceData] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getCarDeviceData] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t */\n\tasync getSingleCarDeviceData(carId: number): Promise<CarData[]> {\n\t\t//const url: string = 'https://connect.paj-gps.de/api/v1/sdevice/car/452';\n\t\tconst baseUrl = 'https://connect.paj-gps.de/api/v1/sdevice/car/';\n\t\tconst url = [baseUrl, carId].join('');\n\t\tconsole.log(`[getSingleCarDeviceData] URL: ${url}`);\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getSingleCarDeviceData] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t\t}\n\t\t\tconst data: CarDataRaw = (await response.json()) as CarDataRaw;\n\t\t\t//console.log('RAW', data);\n\t\t\tconst dataSuccess: CarData[] = data.success;\n\t\t\t//console.log('SUCCESS', dataSuccess);\n\t\t\t//console.log(dataSuccess.length); // Access length property\n\t\t\t//console.log(dataSuccess[0]); // Access the first element\n\t\t\treturn dataSuccess;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getSingleCarDeviceData] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getSingleCarDeviceData] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t */\n\tasync getGeofences(): Promise<GeoFence[]> {\n\t\tconst url = 'https://connect.paj-gps.de/api/v1/geofences';\n\t\tconsole.log(`[getGeofences] URL: ${url}`);\n\t\t//const body = { \"deviceIDs\": [1312315] };\n\t\t//\n\t\t//\t \"message\": \"The GET method is not supported for route api/v1/geofences. Supported methods: POST.\" >> 405\n\t\t//\t \"message\": \"Server Error\" >> 500\n\t\t//\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\taccept: 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t\t},\n\t\t\t\tbody: '{ \"deviceIDs\": [1312315] }',\n\t\t\t});\n\t\t\t//console.log('RESPONSE', response);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getGeofences] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t\t}\n\n\t\t\tconst data: GeoFencesRaw = (await response.json()) as GeoFencesRaw;\n\t\t\t//console.log('GeoFencesRaw ', data);\n\t\t\tconst dataSuccess: GeoFence[] = data.success;\n\n\t\t\t//console.log('SUCCESS', dataSuccess);\n\t\t\t//console.log(dataSuccess.length); // Access length property\n\t\t\t//console.log(dataSuccess[0]); // Access the first element\n\t\t\treturn dataSuccess;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getGeofences] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getGeofences] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t */\n\tasync getRoute(deviceId: number, timestamp: number): Promise<any> {\n\t\tconst url = 'https://api.paj-gps.com/api/v1/route/export';\n\t\tconsole.log(`[getRoute] URL: ${url}`);\n\t\tconst deviceArr: number[] = [];\n\t\tdeviceArr.push(deviceId);\n\t\t//\n\t\tconst body = {\n\t\t\tdeviceId: deviceArr,\n\t\t\tdateStart: timestamp / 1000,\n\t\t\tdateEnd: timestamp / 1000 + 86399,\n\t\t\t//lastMinutes: 30,\n\t\t\t//lastPoints: 114,\n\t\t\trangeType: 'daterange',\n\t\t\ttype: 'pdf',\n\t\t\tsort: 'asc',\n\t\t\ttranslations: {\n\t\t\t\twayPoints: 'Wegpunkte',\n\t\t\t\tsignalFrom: 'Signal von',\n\t\t\t\tshowInGoogle: 'Position auf Google Maps anzeigen',\n\t\t\t\tcurrentPosition: 'Aktuelle Position',\n\t\t\t\tid: 'ID',\n\t\t\t\tlat: 'Breitengrad',\n\t\t\t\tlng: 'L\u00E4ngengrad',\n\t\t\t\tdateTime: 'Uhrzeit',\n\t\t\t\tbattery: 'Batterie',\n\t\t\t\tspeed: 'Geschwindigkeit',\n\t\t\t\tdirection: 'Richtung',\n\t\t\t\tpositionLink: 'Link zur Position',\n\t\t\t},\n\t\t\tversion: 'V2',\n\t\t};\n\t\t//console.log(`[getRoute] Body: ${JSON.stringify(body)}`);\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\taccept: 'application/pdf',\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(body),\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getRoute] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t\t}\n\t\t\treturn response.arrayBuffer();\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getRoute] Fehler:', error.message);\n\t\t\t\tthrow error;\n\t\t\t} else {\n\t\t\t\tconsole.error('[getRoute] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n\t}\n\n\t//https://connect.paj-gps.de/api/v1/logbook/getAllRoutes/2937042\n\t/**\n\t *\n\t */\n\tasync getAllRoutes(deviceId: number): Promise<any> {\n\t\t//\n\t\tconst baseUrl = 'https://connect.paj-gps.de/api/v1/logbook/getAllRoutes/';\n\t\tconst url = [baseUrl, deviceId].join('');\n\t\tconsole.log(`[getAllRoutes] URL: ${url}`);\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getAllRoutes] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t\t}\n\t\t\tconst data: any = await response.json();\n\t\t\t//console.log('RAW', data);\n\t\t\tconst dataSuccess: CarData[] = data.data;\n\t\t\t//console.log('SUCCESS', dataSuccess);\n\t\t\t//const keyCount = Object.keys(dataSuccess).length;\n\t\t\t//console.log(keyCount); // Access length property\n\t\t\t//console.log(dataSuccess[0]); // Access the first element\n\t\t\treturn dataSuccess;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getAllRoutes] Fehler:', error.message);\n\t\t\t\tthrow error;\n\t\t\t} else {\n\t\t\t\tconsole.error('[getAllRoutes] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n\t}\n\n\t//https://connect.paj-gps.de/api/v1/trackerdata/1312315/date_range?dateStart=1730970000000&dateEnd=1730970086399&wifi=1&gps=1\n\t/**\n\t *\n\t */\n\tasync getTrackerData(deviceId: number, timestamp: number): Promise<Track[]> {\n\t\t//\n\t\tconst baseUrl = 'https://connect.paj-gps.de/api/v1/trackerdata/';\n\t\t//nst url = [baseUrl, deviceId, '/date_range?dateStart=1721772000&dateEnd=1722335247'].join('');\n\t\tconst url = [\n\t\t\tbaseUrl,\n\t\t\tdeviceId,\n\t\t\t'/date_range?dateStart=',\n\t\t\ttimestamp / 1000,\n\t\t\t'&dateEnd=',\n\t\t\ttimestamp / 1000 + 86399,\n\t\t\t'&wifi=1&gps=1',\n\t\t].join('');\n\t\tconsole.log(`[getTrackerData] URL: ${url}`);\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getTrackerData] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t\t}\n\n\t\t\tconst data: any = (await response.json()) as TracksRaw;\n\t\t\t//console.log('RAW', data);\n\t\t\tconst dataSuccess: Track[] = data.success;\n\t\t\treturn dataSuccess;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getTrackerData] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getTrackerData] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n\t}\n\n\t//https://connect.paj-gps.de/api/v1/trackerdata/1312315/last_points?lastPoints=10&gps=1&wifi=0\n\t/**\n\t *\n\t */\n\tasync getTrackerDataLast(deviceId: number, points: number): Promise<Track[]> {\n\t\t//\n\t\tconst baseUrl = 'https://connect.paj-gps.de/api/v1/trackerdata/';\n\t\tconst url = [baseUrl, deviceId, '/last_points?lastPoints=', points, '&wifi=0&gps=1'].join('');\n\t\tconsole.log(`[getTrackerDataLast] URL: ${url}`);\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getTrackerDataLast] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t\t}\n\n\t\t\tconst data: any = (await response.json()) as TracksRaw;\n\t\t\t//console.log('RAW', data);\n\t\t\tconst dataSuccess: Track[] = data.success;\n\t\t\treturn dataSuccess;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getTrackerDataLast] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getTrackerDataLast] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n\t}\n\n\t//######\n\t/**\n\t *\n\t */\n\tasync getNotifications(carId: number, alertType: number): Promise<any> {\n\t\t//https://connect.paj-gps.de/api/v1/notifications/1312315?alertType=5&isRead=1\n\t\t/* Alert types ranges from 1 to 7 which are: \n\t\t\t1 -> Shock Alert, \n\t\t\t2 -> Battery Alert, \n\t\t\t3 -> Leave/Enter Area Alert, \n\t\t\t4 -> SOS Alert, \n\t\t\t5 -> Speed Alert, \n\t\t\t6 -> Power Cut-off Alert, \n\t\t\t7 -> Ignition Alert.\n\t\t\tisRead \t0 -> unread and \n\t\t\t\t\t1 -> readed notificaitons\t\t\t\n\t\t*/\n\t\tconst baseUrl = 'https://connect.paj-gps.de/api/v1/notifications/';\n\t\tconst url = [baseUrl, carId, '?alertType=', alertType, '&isRead=0'].join('');\n\t\tconsole.log(`[getNotifications] URL: ${url}`);\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getNotifications] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t\t}\n\t\t\tconst data: CarDataRaw = (await response.json()) as CarDataRaw;\n\t\t\t//console.log('RAW', data);\n\t\t\tconst dataSuccess: CarData[] = data.success;\n\t\t\t//console.log('SUCCESS', dataSuccess);\n\t\t\t//console.log(dataSuccess.length); // Access length property\n\t\t\t//console.log(dataSuccess[0]); // Access the first element\n\t\t\treturn dataSuccess;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getNotifications] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getNotifications] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n\t}\n\n\t//https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=1312315&startDate=1731715200&endDate=1731801500&dsType=mixTR\n\t/**\n\t *\n\t */\n\tasync getPdf_new(deviceId: number): Promise<Buffer> {\n\t\tconst url =\n\t\t\t'https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=1312315&startDate=1731715200&endDate=1731801500&dsType=mixTR';\n\n\t\tconsole.log(`[getPdf] URL: ${url} ${deviceId}`);\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: 'application/pdf',\n\t\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t\t},\n\t\t\t});\n\t\t\t//console.log(response);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getPdf] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t\t}\n\n\t\t\t//const blob = await response.blob();\n\t\t\t//console.log('Blob', blob);\n\t\t\t//const pdfData = await blob.arrayBuffer();\n\n\t\t\t// Pfad zur Ausgabedatei erstellen\n\t\t\tconst filePath = 'pajDemo2.pdf';\n\t\t\tconst outputPath = path.resolve(filePath);\n\t\t\tconsole.log('Output Path', outputPath);\n\n\t\t\tconst pdfBuffer = await response.buffer();\n\n\t\t\t// Schreiben der PDF-Daten in eine Datei\n\t\t\tfs.promises.writeFile(outputPath, Buffer.from(pdfBuffer));\n\n\t\t\treturn pdfBuffer;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getPdf] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getPdf] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n\t}\n\n\t// https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=1287648&startDate=1721772000&endDate=1721858400&dsType=mixTR\n\t/**\n\t *\n\t */\n\tasync getPdf_X(deviceId: number): Promise<Buffer> {\n\t\t//\n\t\tconst baseUrl = 'https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=';\n\t\t//const tempUrl = '&startDate=1721772000&endDate=1721858399';\n\t\tconst tempUrl = '&startDate=1731715200&endDate=1731801599';\n\t\tconst typeUrl = '&dsType=mixTR';\n\t\tconst url = [baseUrl, deviceId, tempUrl, typeUrl].join('');\n\t\t//const url = 'https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=1312315&startDate=1721800740&endDate=1721854740&dsType=mixTR';\n\n\t\tconsole.log(`[getPdf] URL: ${url}`);\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: 'application/pdf',\n\t\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t\t},\n\t\t\t});\n\t\t\t//console.log(response);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getPdf] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t\t}\n\n\t\t\t//const blob = await response.blob();\n\t\t\t//console.log('Blob', blob);\n\t\t\t//const pdfData = await blob.arrayBuffer();\n\n\t\t\t// Pfad zur Ausgabedatei erstellen\n\t\t\tconst filePath = 'pajDemo2.pdf';\n\t\t\tconst outputPath = path.resolve(filePath);\n\t\t\tconsole.log('Output Path', outputPath);\n\n\t\t\tconst pdfBuffer = await response.buffer();\n\n\t\t\t// Schreiben der PDF-Daten in eine Datei\n\t\t\tfs.promises.writeFile(outputPath, Buffer.from(pdfBuffer));\n\n\t\t\treturn pdfBuffer;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getPdf] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getPdf] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t */\n\tasync getPdf(deviceId: number, timestamp: number): Promise<ArrayBuffer> {\n\t\tconst baseUrl = 'https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=';\n\t\t//\n\t\tconst url = [\n\t\t\tbaseUrl,\n\t\t\tdeviceId,\n\t\t\t'&startDate=',\n\t\t\ttimestamp / 1000,\n\t\t\t'&endDate=',\n\t\t\ttimestamp / 1000 + 86399,\n\t\t\t'&dsType=mixTR',\n\t\t].join('');\n\t\tconsole.log(`[getPdf] URL: ${url}`);\n\t\t//console.log('Gespeicherter Token:', this.storedToken);\n\t\t//\n\t\t//const body = { deviceIDs: [1312315] };\n\t\tconst body = {\n\t\t\tdeviceId: [1312315],\n\t\t\tdateStart: 1721772000,\n\t\t\tdateEnd: 1721858399,\n\t\t\tlastMinutes: 30,\n\t\t\tlastPoints: 114,\n\t\t\trangeType: 'daterange',\n\t\t\ttype: 'pdf',\n\t\t\tsort: 'asc',\n\t\t\ttranslations: {\n\t\t\t\twayPoints: 'Wegpunkte',\n\t\t\t\tsignalFrom: 'Signal von',\n\t\t\t\tshowInGoogle: 'Position auf Google Maps anzeigen',\n\t\t\t\tcurrentPosition: 'Aktuelle Position',\n\t\t\t\tid: 'ID',\n\t\t\t\tlat: 'Breitengrad',\n\t\t\t\tlng: 'L\u00E4ngengrad',\n\t\t\t\tdateTime: 'Uhrzeit',\n\t\t\t\tbattery: 'Batterie',\n\t\t\t\tspeed: 'Geschwindigkeit',\n\t\t\t\tdirection: 'Richtung',\n\t\t\t\tpositionLink: 'Link zur Position',\n\t\t\t},\n\t\t\tversion: 'V2',\n\t\t};\n\t\tbody.dateStart = timestamp / 1000;\n\t\tbody.dateEnd = timestamp / 1000 + 86399;\n\n\t\t//try {\n\t\tconsole.log(body);\n\t\tconst response = await fetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\taccept: 'application/pdf',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t},\n\t\t\t//body: JSON.stringify(body),\n\t\t});\n\t\t//console.log('RESPONSE', response);\n\n\t\t//const errorText = await response.text();\n\t\t//console.log('ErrorText', errorText);\n\t\treturn response.arrayBuffer();\n\n\t\t//const pdfBuffer = await response.buffer();\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`[getGeofences] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t}\n\n\t\t/*\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getGeofences] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getGeofences] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n*/\n\t}\n\n\t/**\n\t *\n\t */\n\tasync getPdf_old(deviceId: number): Promise<ArrayBuffer> {\n\t\tconst baseUrl = 'https://connect.paj-gps.de/api/v1/customer/dashboard/downloadpdf?deviceId=';\n\t\tconst tempUrl = '&startDate=1720994400&endDate=1721080800';\n\t\tconst typeUrl = '&dsType=mixTR';\n\t\tconst url = [baseUrl, deviceId, tempUrl, typeUrl].join('');\n\t\tconsole.log(`[getPDF] URL: ${url}`);\n\t\t//\n\t\tconst body = {\n\t\t\tdeviceId: [1312315],\n\t\t\tdateStart: 1721772000,\n\t\t\tdateEnd: 1721858399,\n\t\t\tlastMinutes: 30,\n\t\t\tlastPoints: 114,\n\t\t\trangeType: 'daterange',\n\t\t\ttype: 'pdf',\n\t\t\tsort: 'asc',\n\t\t\ttranslations: {\n\t\t\t\twayPoints: 'Wegpunkte',\n\t\t\t\tsignalFrom: 'Signal von',\n\t\t\t\tshowInGoogle: 'Position auf Google Maps anzeigen',\n\t\t\t\tcurrentPosition: 'Aktuelle Position',\n\t\t\t\tid: 'ID',\n\t\t\t\tlat: 'Breitengrad',\n\t\t\t\tlng: 'L\u00E4ngengrad',\n\t\t\t\tdateTime: 'Uhrzeit',\n\t\t\t\tbattery: 'Batterie',\n\t\t\t\tspeed: 'Geschwindigkeit',\n\t\t\t\tdirection: 'Richtung',\n\t\t\t\tpositionLink: 'Link zur Position',\n\t\t\t},\n\t\t\tversion: 'V2',\n\t\t};\n\t\tbody.dateStart = 1720908000;\n\t\tbody.dateEnd = 1720994000;\n\n\t\t//try {\n\t\tconst response = await fetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\taccept: 'application/pdf',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: `Bearer ${this.storedToken}`,\n\t\t\t},\n\t\t\t//body: JSON.stringify(body),\n\t\t});\n\t\t//console.log('RESPONSE', response);\n\n\t\t//const errorText = await response.text();\n\t\t//console.log('ErrorText', errorText);\n\t\treturn response.arrayBuffer();\n\n\t\t//const pdfBuffer = await response.buffer();\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`[getGeofences] Datenabruf fehlgeschlagen: ${response.statusText}`);\n\t\t}\n\n\t\t/*\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getGeofences] Fehler:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getGeofences] Unbekannter Fehler:', error);\n\t\t\t\tthrow new Error('Unbekannter Fehler aufgetreten');\n\t\t\t}\n\t\t}\n*/\n\t}\n\n\t// Helper\n\t/**\n\t *\n\t */\n\ttimestampToDateDE(unixTimestamp: number): string {\n\t\tconst date = new Date(unixTimestamp);\n\t\treturn date.toLocaleString('de-DE');\n\t}\n\n\t/**\n\t *\n\t */\n\ttimestampToDate(unixTimestamp: number): Date {\n\t\tconsole.log(unixTimestamp);\n\t\treturn new Date(unixTimestamp);\n\t}\n\n\t/**\n\t *\n\t */\n\ttodayTimestamp(): number {\n\t\tconst today = new Date().toISOString().slice(0, -14);\n\t\treturn new Date(today).getTime();\n\t}\n\n\t/**\n\t *\n\t */\n\tdatestringToTimestamp(d: string): number {\n\t\tconst val = d.split('-');\n\t\tconst _year = parseInt(val[0]);\n\t\tconst _month = parseInt(val[1]);\n\t\tconst _date = parseInt(val[2]);\n\t\t//console.log(`${_date} ${_month} ${_year} `);\n\t\t//\n\t\t//const summerOffset = Math.abs(new Date().getTimezoneOffset() / 60);\n\t\t//const calculatedDate = new Date(_year, _month - 1, _date, summerOffset, 0, 0, 0);\n\t\tconst calculatedDate = new Date(_year, _month - 1, _date, 0, 0, 0, 0);\n\t\treturn calculatedDate.getTime();\n\t}\n\n\t/**\n\t *\n\t */\n\tformatDate(d: Date): string {\n\t\tconst year = d.getFullYear();\n\t\tconst month = (d.getMonth() + 1).toString().padStart(2, '0');\n\t\tconst day = d.getDate().toString().padStart(2, '0');\n\t\treturn `${year}-${month}-${day}`;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["fetch", "fs"]
}
