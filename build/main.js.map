{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.3\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport type * as utils from '@iobroker/adapter-core';\nimport { Adapter } from '@iobroker/adapter-core';\nimport { ApiManager } from './lib/apiManager';\nimport { TokenManager } from './lib/tokenManager';\n//import { writeLog } from './lib/filelogger';\n//const fileHandle = { path: '/home/raschy/ioBroker.pajdr', file: 'logs1.txt' };\n\n// Load your modules here, e.g.:\n\nclass Pajdr extends Adapter {\n\tprivate tokenManager!: TokenManager;\n\tprivate apiManager!: ApiManager;\n\n\tconstructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'pajdr',\n\t\t});\n\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\tprivate dataUpdateInterval: NodeJS.Timeout | undefined;\n\tprivate customerId: string | undefined;\n\t//\n\t/**\n\t * This method is called when the adapter starts.\n\t * It initializes the token manager and API manager, retrieves the access token,\n\t * and sets up the initial state of the adapter.\n\t */\n\tasync onReady(): Promise<void> {\n\t\tthis.log.info('Adapter is ready');\n\n\t\tif (!this.config.email || !this.config.password) {\n\t\t\tthis.log.error('Email or password not set in configuration');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.tokenManager = new TokenManager(this, this.config.email, this.config.password);\n\t\tthis.apiManager = new ApiManager(this, this.tokenManager);\n\n\t\ttry {\n\t\t\tawait this.tokenManager.getAccessToken();\n\t\t\t//\n\t\t\tthis.customerId = await this.tokenManager.getCustomerId();\n\t\t\tif (this.customerId === undefined) {\n\t\t\t\tthis.log.error('Customer ID could not be retrieved');\n\t\t\t} else {\n\t\t\t\tthis.log.debug(`Got access token successfully`);\n\t\t\t\tthis.log.info(`customerId: ${this.customerId}`);\n\t\t\t\tawait this.createCustomerFolder(this.customerId);\n\t\t\t\t//\n\t\t\t\t//await this.storeDataToState(\"device1\", \"online\", true);\n\t\t\t\t//await this.storeDataToState(\"device1\", \"room1\", 23.5, { channelId: \"temperatures\" });\n\t\t\t\t//await this.storeDataToState(\"device1\", \"room2\", 21.5, { channelId: \"building.floor1\", name: \"Raumtemperatur EG\" });\n\t\t\t\t//await this.storeDataToState(\"device1\", \"room3\", -14.1, { channelId: \"building.floor1.left\" });\n\t\t\t\t//\n\t\t\t\tawait this.setupStart();\n\t\t\t}\n\t\t} catch (err: any) {\n\t\t\tthis.log.error(`Authentication failed: ${err.message}`);\n\t\t}\n\t\tthis.log.info('Adapter is initialized.');\n\t}\n\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.silly(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t\t//\n\t\t\t// API-Anfrage f\u00FCr Customer\n\t\t\tthis.log.info('################################');\n\t\t\tawait this.queryData();\n\t\t\t//\n\t\t\t// Hier k\u00F6nnen Sie weitere API-Aufrufe oder Logik hinzuf\u00FCgen, die auf den Status\u00E4nderungen basieren.\n\t\t\t// The state was deleted\n\t\t\t// this.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\tprivate async queryData(): Promise<void> {\n\t\t// This method is called when data should be requested\n\t\tthis.log.debug('(queryData#)');\n\t\t// API-Anfrage f\u00FCr Customer\n\t\tthis.apiManager\n\t\t\t.getCustomer()\n\t\t\t.then(customerId => {\n\t\t\t\tthis.log.info(`Queried Customer ID: ${customerId}`);\n\t\t\t\t// You can also set the state with the queried data\n\t\t\t\t//this.setState('customer.customerId', { val: customerId, ack: true });\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.log.error(`Error querying customer data: ${error.message}`);\n\t\t\t});\n\t\t// API-Anfrage f\u00FCr Device\n\t\tawait this.queryGetDevice();\n\t\tthis.queryGetCarDeviceData();\n\t}\n\n\tprivate async queryGetDevice(): Promise<void> {\n\t\tthis.log.debug('(queryGetDevice#)');\n\n\t\ttry {\n\t\t\tconst device = await this.apiManager.getDevice();\n\t\t\tawait this.makeManualLinks(device);\n\n\t\t\tfor (const dev of device) {\n\t\t\t\tthis.log.debug(`Device ID: ${dev.id}, Name: ${dev.name}`);\n\t\t\t\t// await this.storeDataToState(dev.id, 'Name', dev.name);\n\t\t\t}\n\t\t} catch (error: any) {\n\t\t\tthis.log.error(`Error querying device data: ${error.message}`);\n\t\t}\n\t}\n\n\tprivate async makeManualLinks(device: Device[]): Promise<void> {\n\t\t// This method is called to create links for the manuals\n\t\tthis.log.debug('[makeManualLinks#]');\n\t\t// You can add your logic here to create links based on the device data\n\t\tconst device_models = device[0].device_models;\n\t\tif (device_models && device_models.length > 0) {\n\t\t\tlet manual_link: ManualLinkMap | null = null;\n\t\t\tif (typeof device_models[0].manual_link === 'string') {\n\t\t\t\tmanual_link = JSON.parse(device_models[0].manual_link) as ManualLinkMap;\n\t\t\t} else if (typeof device_models[0].manual_link === 'object' && device_models[0].manual_link !== null) {\n\t\t\t\tmanual_link = device_models[0].manual_link;\n\t\t\t}\n\t\t\tif (manual_link) {\n\t\t\t\t//console.log('[getDevice] Manual Link: ', manual_link);\n\t\t\t\t//console.log('[getDevice] Manual Link DE: ', manual_link.de);\n\t\t\t\t//this.storeDataToState('manualLink', manual_link.de);\n\t\t\t\tif (this.customerId !== undefined) {\n\t\t\t\t\tawait this.storeDataToState(this.customerId, 'manualLink', manual_link.de);\n\t\t\t\t} else {\n\t\t\t\t\tthis.log.warn('[makeManualLinks] customerId is undefined, cannot store manual link');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.log.warn('[makeManualLinks] No manual link available');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.log.warn('[makeManualLinks] No device models found');\n\t\t}\n\t}\n\n\tprivate queryGetCarDeviceData(): void {\n\t\t// This method is called when data should be requested\n\t\tthis.log.debug('(queryGetCarDeviceData#)');\n\t\t// API-Request f\u00FCr CarDeviceData\n\t\tthis.apiManager\n\t\t\t.getCarDeviceData()\n\t\t\t.then(async carData => {\n\t\t\t\t// and here you can process the car data\n\t\t\t\tfor (const car of carData) {\n\t\t\t\t\t//#console.log(`car: ${JSON.stringify(car)}`);\n\t\t\t\t\tthis.log.debug(`Car ID: ${car.id}, Name: ${car.car_name}`);\n\t\t\t\t\t// Create a folder for each car\n\t\t\t\t\tif (this.customerId !== undefined) {\n\t\t\t\t\t\tawait this.storeDataToState(this.customerId, 'CarName', car.car_name, {\n\t\t\t\t\t\t\tchannelId: String(car.id),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait this.storeDataToState(this.customerId, 'LicensePlate', car.license_plate, {\n\t\t\t\t\t\t\tchannelId: String(car.id),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait this.storeDataToState(this.customerId, 'Mileage', car.optimized_mileage, {\n\t\t\t\t\t\t\tchannelId: String(car.id),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait this.storeDataToState(this.customerId, 'CreatedAt', car.created_at, {\n\t\t\t\t\t\t\tchannelId: String(car.id),\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.log.warn('customerId is undefined, cannot create structured state for car');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.log.error(`Error querying car device data: ${error.message}`);\n\t\t\t});\n\t}\n\n\t//\t#### Helper ####\n\t//\n\t/**\n\t * removes illegal characters\n\t *\n\t * @param inputString Designated name for an object/data point\n\t * @returns Cleaned name for an object/data point\n\t */\n\tremoveInvalidCharacters(inputString: string): string {\n\t\tconst regexPattern = '[^a-zA-Z0-9]+';\n\t\tconst regex = new RegExp(regexPattern, 'gu');\n\t\treturn inputString.replace(regex, '_');\n\t}\n\n\tasync createCustomerFolder(customerId: string | undefined): Promise<void> {\n\t\tif (!customerId) {\n\t\t\tthis.log.warn('[createCustomerFolder] Invalid customerId');\n\t\t\treturn;\n\t\t}\n\t\tconst dp_customerId = this.removeInvalidCharacters(customerId);\n\t\tthis.log.debug(`[createCustomerFolder] Customer \"${dp_customerId}\"`);\n\t\tawait this.setObjectNotExistsAsync(dp_customerId, {\n\t\t\ttype: 'device',\n\t\t\tcommon: {\n\t\t\t\tname: dp_customerId,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\t//\n\t\tawait this.extendObject(dp_customerId, {\n\t\t\tcommon: {\n\t\t\t\tname: {\n\t\t\t\t\ten: 'Customer ID',\n\t\t\t\t\tde: 'Kunden-ID',\n\t\t\t\t\tru: '\u0418\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440 \u043A\u043B\u0438\u0435\u043D\u0442\u0430',\n\t\t\t\t\tpt: 'ID do cliente',\n\t\t\t\t\tnl: 'Klant-ID',\n\t\t\t\t\tfr: 'ID client',\n\t\t\t\t\tit: 'ID cliente',\n\t\t\t\t\tes: 'ID del cliente',\n\t\t\t\t\tpl: 'ID klienta',\n\t\t\t\t\tuk: '\u0406\u0434\u0435\u043D\u0442\u0438\u0444\u0456\u043A\u0430\u0442\u043E\u0440 \u043A\u043B\u0456\u0454\u043D\u0442\u0430',\n\t\t\t\t\t'zh-cn': '\u5BA2\u6237ID',\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate async setupStart(): Promise<void> {\n\t\t// Initialize the token manager\n\t\t//this.tokenManager = new TokenManager(this.adapter, this.email, this.password);\n\t\tawait this.setObjectNotExistsAsync('Start', {\n\t\t\ttype: 'state',\n\t\t\tcommon: {\n\t\t\t\tname: 'Start',\n\t\t\t\ttype: 'boolean',\n\t\t\t\trole: 'indicator',\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\tthis.subscribeStates('Start'); // for requesting data\n\t}\n\n\tasync storeDataToState(\n\t\tdeviceId: string,\n\t\tstateId: string,\n\t\tvalue: any,\n\t\toptions?: {\n\t\t\tchannelId?: string;\n\t\t\tname?: string;\n\t\t\trole?: string;\n\t\t\tread?: boolean;\n\t\t\twrite?: boolean;\n\t\t},\n\t): Promise<void> {\n\t\tconst devicePath = deviceId;\n\t\tconst channelId = options?.channelId;\n\t\tconst statePath = channelId ? `${deviceId}.${channelId}.${stateId}` : `${deviceId}.${stateId}`;\n\n\t\t// Typ automatisch erkennen\n\t\tconst detectedType: ioBroker.CommonType = typeof value as ioBroker.CommonType;\n\t\tif (!['number', 'string', 'boolean'].includes(detectedType)) {\n\t\t\tthrow new Error(`Unsupported state value type: ${detectedType}`);\n\t\t}\n\n\t\t// Role automatisch zuweisen, falls nicht gesetzt\n\t\tlet role: string;\n\t\tif (options?.role) {\n\t\t\trole = options.role;\n\t\t} else {\n\t\t\tswitch (detectedType) {\n\t\t\t\tcase 'number':\n\t\t\t\t\trole = 'value';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\trole = 'indicator';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'string':\n\t\t\t\t\trole = 'text';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\trole = 'state';\n\t\t\t}\n\t\t}\n\n\t\tconst stateCommon: ioBroker.StateCommon = {\n\t\t\tname: options?.name || stateId,\n\t\t\ttype: detectedType,\n\t\t\trole,\n\t\t\tread: options?.read ?? true,\n\t\t\twrite: options?.write ?? false,\n\t\t};\n\n\t\t// 1. Device anlegen\n\t\tconst existingDevice = await this.getObjectAsync(devicePath);\n\t\tif (!existingDevice) {\n\t\t\tawait this.setObjectNotExistsAsync(devicePath, {\n\t\t\t\ttype: 'device',\n\t\t\t\tcommon: { name: deviceId },\n\t\t\t\tnative: {},\n\t\t\t});\n\t\t} else if (existingDevice.type !== 'device') {\n\t\t\tthis.log.warn(\n\t\t\t\t`[createStructuredState] '${devicePath}' exists but is type '${existingDevice.type}', expected 'device'`,\n\t\t\t);\n\t\t}\n\n\t\t// 2. Channel-Struktur erzeugen (falls vorhanden)\n\t\tif (channelId) {\n\t\t\tconst parts = channelId.split('.');\n\t\t\tlet path = devicePath;\n\n\t\t\tfor (let i = 0; i < parts.length; i++) {\n\t\t\t\tconst part = parts[i];\n\t\t\t\tpath = `${path}.${part}`;\n\t\t\t\tconst isLast = i === parts.length - 1;\n\t\t\t\tconst expectedType: ioBroker.ObjectType = isLast ? 'channel' : 'folder';\n\n\t\t\t\tconst existing = await this.getObjectAsync(path);\n\t\t\t\tif (!existing) {\n\t\t\t\t\tawait this.setObjectNotExistsAsync(path, {\n\t\t\t\t\t\ttype: expectedType,\n\t\t\t\t\t\tcommon: { name: part },\n\t\t\t\t\t\tnative: {},\n\t\t\t\t\t});\n\t\t\t\t} else if (existing.type !== expectedType) {\n\t\t\t\t\tthis.log.warn(\n\t\t\t\t\t\t`[createStructuredState] '${path}' exists but is type '${existing.type}', expected '${expectedType}'`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 3. State anlegen (mit Konfliktpr\u00FCfung)\n\t\tconst existingObj = await this.getObjectAsync(statePath);\n\t\tif (existingObj && existingObj.type !== 'state') {\n\t\t\tthis.log.warn(\n\t\t\t\t`[createStructuredState] Cannot create state at '${statePath}', object of type '${existingObj.type}' already exists there.`,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.setObjectNotExistsAsync(statePath, {\n\t\t\ttype: 'state',\n\t\t\tcommon: stateCommon,\n\t\t\tnative: {},\n\t\t});\n\n\t\t// 4. Wert setzen\n\t\tawait this.setState(statePath, { val: value, ack: true });\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t *\n\t * @param callback Callback\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\tif (this.dataUpdateInterval) {\n\t\t\t\tclearTimeout(this.dataUpdateInterval);\n\t\t\t}\n\t\t\t// ...\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tthis.log.debug(`[onUnload] ${JSON.stringify(e)}`);\n\t\t\tcallback();\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Pajdr(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Pajdr())();\n}\n"],
  "mappings": "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",
  "names": []
}
