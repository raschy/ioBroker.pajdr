{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.3\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { Adapter } from '@iobroker/adapter-core';\nimport { ApiManager } from './lib/apiManager';\nimport { TokenManager } from './lib/tokenManager';\n//import { writeLog } from './lib/filelogger';\n//const fileHandle = { path: '/home/raschy/ioBroker.pajdr', file: 'logs1.txt' };\n\n// Load your modules here, e.g.:\n\nclass Pajdr extends Adapter {\n\tprivate tokenManager!: TokenManager;\n\tprivate apiManager!: ApiManager;\n\n\tconstructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'pajdr',\n\t\t});\n\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\tprivate dataUpdateInterval: NodeJS.Timeout | undefined;\n\tprivate userId: number | undefined;\n\t//\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async _onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\tconst user_name: string = this.config.email;\n\t\tconst user_pass: string = this.config.password;\n\t\t//let updateInterval: number = 10; //this.config.updateIntervall;\n\t\t//\n\t\tconst executionInterval = 360;\n\t\t//\n\t\tconst dataDir: string = utils.getAbsoluteDefaultDataDir();\n\t\tconsole.log(`DIR ${dataDir}`);\n\t\t//\n\t\t//\n\t\t//await this.callData(user_name, user_pass);\n\n\t\t// ####### LOOP #######\n\t\t//if (this.internDataReady) {\n\t\t// timed data request\n\t\t//this.dataUpdateInterval = setTimeout(() => this.callData(user_name, user_pass), executionInterval * 1000);\n\t\t//}\n\t}\n\n\tasync onReady(): Promise<void> {\n\t\tthis.log.info('Adapter is ready');\n\n\t\tif (!this.config.email || !this.config.password) {\n\t\t\tthis.log.error('Email or password not set in configuration');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.tokenManager = new TokenManager(this, this.config.email, this.config.password);\n\t\tthis.apiManager = new ApiManager(this, this.tokenManager);\n\n\t\ttry {\n\t\t\tawait this.tokenManager.getAccessToken();\n\t\t\t//\n\t\t\tthis.userId = await this.tokenManager.getUserId();\n\t\t\tif (this.userId === undefined) {\n\t\t\t\tthis.log.error('User ID could not be retrieved');\n\t\t\t} else {\n\t\t\t\tthis.log.debug(`Got access token successfully`);\n\t\t\t\tthis.log.info(`UserId: ${this.userId}`);\n\t\t\t\tthis.createCustomerFolder(this.userId);\n\t\t\t\t//\n\t\t\t\tthis.setupStart();\n\t\t\t}\n\t\t} catch (err: any) {\n\t\t\tthis.log.error(`Authentication failed: ${err.message}`);\n\t\t}\n\t\tthis.log.info('Adapter is initialized.');\n\t}\n\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.silly(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t\t//\n\t\t\t// API-Anfrage f\u00FCr Customer\n\t\t\tthis.log.info('################################');\n\t\t\tthis.queryData();\n\t\t\t//\n\t\t\t// Hier k\u00F6nnen Sie weitere API-Aufrufe oder Logik hinzuf\u00FCgen, die auf den Status\u00E4nderungen basieren.\n\t\t\t// The state was deleted\n\t\t\t// this.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\tprivate queryData(): void {\n\t\t// This method is called when data should be requested\n\t\tthis.log.debug('(queryData#)');\n\t\t// API-Anfrage f\u00FCr Customer\n\t\tthis.apiManager.getCustomer()\n\t\t\t.then((userId) => {\n\t\t\t\tthis.log.info(`Queried Customer ID: ${userId}`);\n\t\t\t\t// You can also set the state with the queried data\n\t\t\t\t//this.setState('customer.userId', { val: userId, ack: true });\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthis.log.error(`Error querying customer data: ${error.message}`);\n\t\t\t});\n\t\t// API-Anfrage f\u00FCr Device\n\t\tthis.queryGetDevice(); // funktioniert\n\t\tthis.queryGetCarDeviceData();\n\t}\n\n\tprivate queryGetDevice(): void {\n\t\t// This method is called when data should be requested\n\t\tthis.log.debug('[queryGetDevice#]');\n\t\t// API-Request f\u00FCr Device\n\t\tthis.apiManager.getDevice()\n\t\t\t.then((device) => {\n\t\t\t\tmakeManualLinks.call(this, device);\n\t\t\t\t// and here you can process the device data\n\t\t\t\tfor (const dev of device) {\n\t\t\t\t\t//console.log(`dev: ${JSON.stringify(dev)}`);\n\t\t\t\t\tthis.log.debug(`Device ID: ${dev.id}, Name: ${dev.name}`);\n\t\t\t\t\t// Create a folder for each device\n\t\t\t\t\tthis.storeDataToState('Name', dev.name);\n\t\t\t\t\tthis.storeDataToState('ModelNr', dev.model_nr);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthis.log.error(`Error querying device data: ${error.message}`);\n\t\t\t});\n\t\t// \n\t\tfunction makeManualLinks(this: Pajdr, device: Device[]): void {\n\t\t\t// This method is called to create links for the manuals\n\t\t\tthis.log.silly('[makeManualLinks#]');\n\t\t\t// You can add your logic here to create links based on the device data\n\t\t\tconst device_models = device[0].device_models;\n\t\t\tif (device_models && device_models.length > 0) {\n\t\t\t\tlet manual_link: ManualLinkMap | null = null;\n\t\t\t\tif (typeof device_models[0].manual_link === 'string') {\n\t\t\t\t\tmanual_link = JSON.parse(device_models[0].manual_link as string) as ManualLinkMap;\n\t\t\t\t} else if (typeof device_models[0].manual_link === 'object' && device_models[0].manual_link !== null) {\n\t\t\t\t\tmanual_link = device_models[0].manual_link as ManualLinkMap;\n\t\t\t\t}\n\t\t\t\tif (manual_link) {\n\t\t\t\t\t//console.log('[getDevice] Manual Link: ', manual_link);\n\t\t\t\t\t//console.log('[getDevice] Manual Link DE: ', manual_link.de);\n\t\t\t\t\tthis.storeDataToState('manualLink', manual_link.de);\n\t\t\t\t} else {\n\t\t\t\t\tthis.log.warn('[getDevice] No manual link available');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.log.warn('[getDevice] No device models found');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate queryGetCarDeviceData(): void {\n\t\t// This method is called when data should be requested\n\t\tthis.log.debug('(queryGetCarDeviceData#)');\n\t\t// API-Request f\u00FCr CarDeviceData\n\t\tthis.apiManager.getCarDeviceData()\n\t\t\t.then((carData) => {\n\t\t\t\t// and here you can process the car data\n\t\t\t\tfor (const car of carData) {\n\t\t\t\t\t//console.log(`car: ${JSON.stringify(car)}`);\n\t\t\t\t\tthis.log.debug(`Car ID: ${car.id}, Name: ${car.car_name}`);\n\t\t\t\t\t// Create a folder for each car\n\t\t\t\t\tthis.storeDataToState('CarName', car.car_name);\n\t\t\t\t\tthis.storeDataToState('ModelName', car.model_name);\n\t\t\t\t\tthis.storeDataToState('LicensePlate', car.license_plate);\n\t\t\t\t\tthis.storeDataToState('Mileage', car.optimized_mileage);\n\t\t\t\t\tthis.storeDataToState('CreatedAt', car.created_at);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthis.log.error(`Error querying car device data: ${error.message}`);\n\t\t\t});\n\t}\n\n\t//\t#### Helper ####\n\t//\n\t/**\n\t * removes illegal characters\n\t *\n\t * @param inputString Designated name for an object/data point\n\t * @returns Cleaned name for an object/data point\n\t */\n\tremoveInvalidCharacters(inputString: string): string {\n\t\tconst regexPattern = '[^a-zA-Z0-9]+';\n\t\tconst regex = new RegExp(regexPattern, 'gu');\n\t\treturn inputString.replace(regex, '_');\n\t}\n\n\tstoreDataToState(id: string, value: any): void {\n\t\t//this.log.debug(`[storeDataToState] Storing data for User: ${this.userId} ID: ${id}, Value: ${value}`);\n\t\tconst dp_DeviceId = (this.removeInvalidCharacters(String(this.userId))) + '.' + this.removeInvalidCharacters(id);\n\t\t// Create the state if it does not exist\n\t\tthis.setObjectNotExistsAsync(dp_DeviceId, {\n\t\t\ttype: 'state',\n\t\t\tcommon: {\n\t\t\t\tname: id,\n\t\t\t\ttype: Array.isArray(value)\n\t\t\t\t\t? 'array'\n\t\t\t\t\t: value === null\n\t\t\t\t\t\t? 'mixed'\n\t\t\t\t\t\t: typeof value === 'boolean'\n\t\t\t\t\t\t\t? 'boolean'\n\t\t\t\t\t\t\t: typeof value === 'number'\n\t\t\t\t\t\t\t\t? 'number'\n\t\t\t\t\t\t\t\t: typeof value === 'object'\n\t\t\t\t\t\t\t\t\t? 'object'\n\t\t\t\t\t\t\t\t\t: 'string',\n\t\t\t\trole: 'state',\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t},\n\t\t\tnative: {},\n\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// Set the value of the state\n\t\t\t\tthis.setState(dp_DeviceId, { val: value, ack: true })\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tthis.log.debug(`[storeDataToState] State \"${dp_DeviceId}\" set to \"${value}\"`);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tthis.log.error(`[storeDataToState] Error setting state ${dp_DeviceId}: ${error.message}`);\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthis.log.error(`[storeDataToState] Error creating state ${dp_DeviceId}: ${error.message}`);\n\t\t\t});\n\t}\n\n\tasync createCustomerFolder(userId: number | undefined): Promise<void> {\n\t\tif (!userId) {\n\t\t\tthis.log.warn('[createCustomerFolder] Invalid userId');\n\t\t\treturn;\n\t\t}\n\t\tconst dp_UserId = this.removeInvalidCharacters(String(userId));\n\t\tthis.log.debug(`[createCustomerFolder] User \"${dp_UserId}\"`);\n\t\tawait this.setObjectNotExistsAsync(dp_UserId, {\n\t\t\ttype: 'device',\n\t\t\tcommon: {\n\t\t\t\tname: dp_UserId,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\t//\n\t\tawait this.extendObject(dp_UserId, {\n\t\t\tcommon: {\n\t\t\t\tname: {\n\t\t\t\t\ten: 'Customer ID',\n\t\t\t\t\tde: 'Kunden-ID',\n\t\t\t\t\tru: '\u0418\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440 \u043A\u043B\u0438\u0435\u043D\u0442\u0430',\n\t\t\t\t\tpt: 'ID do cliente',\n\t\t\t\t\tnl: 'Klant-ID',\n\t\t\t\t\tfr: 'ID client',\n\t\t\t\t\tit: 'ID cliente',\n\t\t\t\t\tes: 'ID del cliente',\n\t\t\t\t\tpl: 'ID klienta',\n\t\t\t\t\tuk: '\u0406\u0434\u0435\u043D\u0442\u0438\u0444\u0456\u043A\u0430\u0442\u043E\u0440 \u043A\u043B\u0456\u0454\u043D\u0442\u0430',\n\t\t\t\t\t'zh-cn': '\u5BA2\u6237ID',\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate async setupStart(): Promise<void> {\n\t\t// Initialize the token manager\n\t\t//this.tokenManager = new TokenManager(this.adapter, this.email, this.password);\n\t\tawait this.setObjectNotExistsAsync('Start', {\n\t\t\ttype: 'state',\n\t\t\tcommon: {\n\t\t\t\tname: 'Start',\n\t\t\t\ttype: 'boolean',\n\t\t\t\trole: 'indicator',\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\tthis.subscribeStates('Start'); // for requesting data\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t *\n\t * @param callback Callback\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\tif (this.dataUpdateInterval) {\n\t\t\t\tclearTimeout(this.dataUpdateInterval);\n\t\t\t}\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tthis.log.debug(`[onUnload] ${JSON.stringify(e)}`);\n\t\t\tcallback();\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Pajdr(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Pajdr())();\n}\n"],
  "mappings": "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",
  "names": []
}
