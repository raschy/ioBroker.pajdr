{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.3\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { promises as fs } from 'fs';\nimport { ApiManager } from './ApiManager';\n//import { writeLog } from './lib/filelogger';\n//const fileHandle = { path: '/home/raschy/ioBroker.pajdr', file: 'logs1.txt' };\n\n// Load your modules here, e.g.:\n\nclass Pajdr extends utils.Adapter {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'pajdr',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\t// this.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\tprivate dataUpdateInterval: NodeJS.Timeout | undefined;\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\tconst user_name: string = this.config.email;\n\t\tconst user_pass: string = this.config.password;\n\t\t//let updateInterval: number = 10; //this.config.updateIntervall;\n\t\t//\n\t\tconst executionInterval: number = 360;\n\t\t//\n\t\tconst dataDir: string = utils.getAbsoluteDefaultDataDir();\n\t\tconsole.log(`DIR ${dataDir}`);\n\t\t//\n\t\tawait this.callData(user_name, user_pass);\n\n\t\t// ####### LOOP #######\n\t\t//if (this.internDataReady) {\n\t\t// timed data request\n\t\tthis.dataUpdateInterval = setTimeout(() => this.callData(user_name, user_pass), executionInterval * 1000);\n\t\t//}\n\t}\n\tasync callData(user_name: string, user_pass: string): Promise<void> {\n\t\tthis.log.debug('#####  callData  #####');\n\t\ttry {\n\t\t\tconst client = new ApiManager(user_name, user_pass);\n\n\t\t\t// Token abrufen\n\t\t\t//const token = await client.getToken();\n\n\t\t\t// Token speichern\n\t\t\t//await client.saveToken(token);\n\t\t\t//console.log('Token gespeichert:', token);\n\n\t\t\t// Token laden und verwenden\n\t\t\tawait client.loadToken();\n\t\t\t//#const storedToken: string = await client.loadToken();\n\t\t\t//#console.log('Gespeicherter Token:', storedToken);\n\n\t\t\t// API-Anfrage f\u00FCr Customer\n\t\t\tconst userId = await client.getCustomer();\n\t\t\tconsole.log('[Customer] UserId:', userId);\n\t\t\t//\n\t\t\t// API-Anfrage f\u00FCr Device\n\t\t\tconst device: CarData[] = await client.getDevice();\n\t\t\t//console.log('[Device] Abgerufene Daten: ', device);\n\t\t\tconst deviceId = device[0].carDevice_id;\n\t\t\tconsole.log('[Device]: ID', deviceId);\n\t\t\t//\n\t\t\t// API-Anfrage f\u00FCr CarDeviceData\n\t\t\tconst carData = await client.getCarDeviceData();\n\t\t\tconsole.log('[CarDeviceData] Anzahl Datens\u00E4tze :', carData.length);\n\t\t\t//console.log('[CarDeviceData] Abgerufene Daten :', carData);\n\t\t\tconst carCount = carData.length;\n\t\t\tconsole.log('[CarDeviceData]: Anzahl Fahrzeuge', carCount);\n\t\t\tconst plateId = carData[0].plate_id;\n\t\t\tconsole.log('[CarDeviceData]: Kfz', plateId);\n\t\t\tconst carDeviceId = carData[0].id;\n\t\t\tconsole.log('[CarDeviceData]: CarDeviceId', carDeviceId);\n\t\t\tconst idCustomer = carData[0].customer_id;\n\t\t\tconsole.log('[CarDeviceData]: Customer ID', idCustomer);\n\t\t\tconst idDevice = carData[0].iddevice;\n\t\t\tconsole.log('[CarDeviceData]: ID-Device', idDevice);\n\t\t\tconst mileage: number = parseFloat(carData[0].optimized_mileage);\n\t\t\tconsole.log('[SingleCarDeviceData] km-Stand: ', mileage);\n\t\t\t//\n\t\t\t// API-Anfrage f\u00FCr SingleCarDeviceData\n\t\t\t//const singleData = await client.getSingleCarDeviceData(carDeviceId);\n\t\t\t//console.log('[SingleCarDeviceData] Abgerufene Daten :', singleData);\n\t\t\t//\n\t\t\t// API-Anfrage f\u00FCr GeoFence\n\t\t\tconst geo = await client.getGeofences();\n\t\t\t//console.log('[Geofence] Abgerufene Daten: ', geo);\n\t\t\tconsole.log('[Geofence] Anzahl Fences: ', geo.length);\n\t\t\tgeo.forEach((fence) => console.log(fence.name));\n\t\t\t//fs.writeFile('pajGeoFences.txt', Buffer.from(geo));\n\t\t\t//\n\t\t\t// API-Anfrage f\u00FCr AllRoutes\n\t\t\t//const routes = await client.getAllRoutes(idDevice);\n\t\t\t//console.log('[AllRoutes] Abgerufene Daten: ', routes);\n\t\t\t//\n\t\t\t//let innerData;\n\t\t\t//let nArray = 0;\n\t\t\t//const anzRoutes: number = Object.keys(routes).length;\n\t\t\t//console.log('Anzahl Routen: ', anzRoutes);\n\t\t\t/*\n\t\t\tfor (let j: number = 0; j < anzRoutes; j++) {\n\t\t\t\tconst tripStartDate = Object.keys(routes)[j];\n\t\t\t\tconsole.log(j, tripStartDate); // Access the first element\n\t\t\t\tfor (const element in routes) {\n\t\t\t\t\tconst route: any = routes[element];\n\t\t\t\t\t//console.log('inner: ', innerData[0]);\n\t\t\t\t\tfor (const element in route) {\n\t\t\t\t\t\t//console.log('element: ', element);\n\t\t\t\t\t\tconst routeId = route[element].id;\n\t\t\t\t\t\tconsole.log('Route ID: ', routeId);\n\t\t\t\t\t\tconst routeStartLat = route[element].start_lat;\n\t\t\t\t\t\tconsole.log('  Start Lat: ', routeStartLat);\n\t\t\t\t\t\tconst routeStartOrt = route[element].start_address;\n\t\t\t\t\t\tconsole.log('  Start Ort: ', routeStartOrt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n\t\t\t//\n\t\t\t// API-Anfrage f\u00FCr TrackerData\n\t\t\tconst abfrageDatum = '2024-11-18';\n\t\t\tconst today_ts: number = client.datestringToTimestamp(abfrageDatum);\n\t\t\tconsole.log(today_ts);\n\t\t\tconst tracks = await client.getTrackerData(idDevice, today_ts);\n\t\t\t//console.log('[TrackerData] Abgerufene Daten: ', tracks);\n\t\t\tconsole.log('[TrackerData] Anzahl Tracks: ', tracks.length);\n\t\t\t//\n\t\t\tconst tracksLast = await client.getTrackerDataLast(idDevice, 5);\n\t\t\tconsole.log('[TrackerDataLast] Abgerufene Daten: ', tracksLast);\n\t\t\tconsole.log('[TrackerDataLast] Anzahl Tracks: ', tracksLast.length);\n\t\t\t//\n\t\t\t// API-Anfrage f\u00FCr Notifications\n\t\t\t//const notfs3 = await client.getNotifications(idDevice, 3); // Radiusalarm\n\t\t\t//console.log('[Notifications] Abgerufene Daten: ', notfs3);\n\t\t\t//const notfs5 = await client.getNotifications(idDevice, 5); // Speedalarm\n\t\t\t//console.log('[Notifications] Abgerufene Daten: ', notfs5);\n\n\t\t\t// API-Anfrage f\u00FCr pdf-Download\n\t\t\t//const pdfBuffer = await client.getPdf_X(idDevice);\n\t\t\t//const pdfBuffer = await client.getPdf(idDevice, today_ts);\n\t\t\tconst pdfBuffer = await client.getPdf_new(idDevice);\n\t\t\tfs.writeFile('pajData_03_241118.pdf', Buffer.from(pdfBuffer));\n\t\t\tconsole.log('[PDF getPdf] Abgerufene Daten: ', pdfBuffer);\n\n\t\t\t// API-Anfrage f\u00FCr pdf-Download von Routen f\u00FCr einen ausgew\u00E4hlten Tag\n\t\t\tconst pdfBufferR = await client.getRoute(idDevice, today_ts);\n\t\t\tfs.writeFile('pajData_03r.pdf', Buffer.from(pdfBufferR));\n\t\t\t//console.log('[PDF getRoute] Abgerufene Daten: ', JSON.stringify(pdfBufferR));\n\n\t\t\t//\n\t\t} catch (error) {\n\t\t\tconsole.error('Fehler:', error);\n\t\t}\n\t}\n\n\t//\t#### Helper ####\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t//## this.updateInterval && clearInterval(this.updateInterval);\n\t\t\t// clearTimeout(timeout2);\n\t\t\tif (this.dataUpdateInterval) clearTimeout(this.dataUpdateInterval);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Pajdr(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Pajdr())();\n}\n"],
  "mappings": "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",
  "names": ["fs"]
}
