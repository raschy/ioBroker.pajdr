{
  "version": 3,
  "sources": ["../../src/lib/filelogger.ts"],
  "sourcesContent": ["//  ======  File Logging   ======\n// writeLog( fileHandle, \"Text\" );\n// fileHandle = { path: './logs/airquality', file: 'logs.txt' };\n\nimport { promises as fs } from 'fs';\n//\ninterface Logger {\n\tpath: string;\n\tfile: string;\n}\n//\nexport async function writeLog(fileObj: Logger, logEntry: string): Promise<void> {\n\t// Get the current date and time\n\tconst now = new Date();\n\tconst dateTime = now.toLocaleString('fr-CH'); // best format for log-entrys\n\t// Format the log entry\n\tconst data = `${dateTime}\\t${logEntry}\\n`;\n\tappendDataToFile(fileObj, data);\n}\n\nasync function appendDataToFile(fileObj: Logger, data: string): Promise<void> {\n\t//console.log(`(f) checkDirectory ${JSON.stringify(fileObj)}`);\n\tif (!fileObj.path.endsWith('/')) {\n\t\tfileObj.path += '/';\n\t\t//console.log(`\"/\" wurde an ${fileObj.path} angef\u00FCgt.`);\n\t}\n\t//\n\ttry {\n\t\t// \u00DCberpr\u00FCfen und Verzeichnis erstellen, falls es nicht existiert\n\t\tawait fs.mkdir(fileObj.path, { recursive: true });\n\t\t// Daten an die Datei anh\u00E4ngen\n\t\tconst filename = fileObj.path + dynFilename(fileObj); //fileObj.file;\n\t\t//console.log(`Filename: ${filename}`);\n\t\tawait fs.appendFile(filename, data);\n\t\tconsole.log(`Daten wurden erfolgreich an die Datei ${filename} angeh\u00E4ngt.`);\n\t} catch (error: any) {\n\t\tif (error.code === 'EACCES') {\n\t\t\tconsole.log('Zugriffsfehler: Sie haben keine Berechtigung zum Anh\u00E4ngen von Daten an die Datei.');\n\t\t} else if (error.code === 'ENOENT') {\n\t\t\tconsole.log('Datei oder Verzeichnis nicht gefunden: ' + error.path);\n\t\t} else if (error.code === 'ENOTDIR') {\n\t\t\tconsole.log('Pfad ist kein Verzeichnis: ' + error.path);\n\t\t} else {\n\t\t\tconsole.log('Ein unbekannter Fehler ist aufgetreten:');\n\t\t}\n\t}\n\t//console.log('Fertig');\n\t//__________________________\n\t// Dynamic filename for logfiles\n\tfunction dynFilename(fileObj: Logger): string {\n\t\tconst f: string[] = fileObj.file.split('.');\n\t\tconst dynFile = [f[0], '_', logDate4File(), '.', f[1]].join('');\n\t\treturn dynFile;\n\t}\n\t//\n\t//__________________________\n\t// Format date for logfiles\n\tfunction logDate4File(): string {\n\t\tconst d = new Date();\n\t\tconst year = d.getFullYear() - 2000;\n\t\tconst month = (d.getMonth() + 1).toString().padStart(2, '0');\n\t\tconst day = d.getDate().toString().padStart(2, '0');\n\t\treturn `${year}${month}${day}`;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,gBAA+B;AAO/B,eAAsB,SAAS,SAAiB,UAAiC;AAEhF,QAAM,MAAM,oBAAI,KAAK;AACrB,QAAM,WAAW,IAAI,eAAe,OAAO;AAE3C,QAAM,OAAO,GAAG,QAAQ,IAAK,QAAQ;AAAA;AACrC,mBAAiB,SAAS,IAAI;AAC/B;AAEA,eAAe,iBAAiB,SAAiB,MAA6B;AAE7E,MAAI,CAAC,QAAQ,KAAK,SAAS,GAAG,GAAG;AAChC,YAAQ,QAAQ;AAAA,EAEjB;AAEA,MAAI;AAEH,UAAM,UAAAA,SAAG,MAAM,QAAQ,MAAM,EAAE,WAAW,KAAK,CAAC;AAEhD,UAAM,WAAW,QAAQ,OAAO,YAAY,OAAO;AAEnD,UAAM,UAAAA,SAAG,WAAW,UAAU,IAAI;AAClC,YAAQ,IAAI,yCAAyC,QAAQ,gBAAa;AAAA,EAC3E,SAAS,OAAY;AACpB,QAAI,MAAM,SAAS,UAAU;AAC5B,cAAQ,IAAI,sFAAmF;AAAA,IAChG,WAAW,MAAM,SAAS,UAAU;AACnC,cAAQ,IAAI,4CAA4C,MAAM,IAAI;AAAA,IACnE,WAAW,MAAM,SAAS,WAAW;AACpC,cAAQ,IAAI,gCAAgC,MAAM,IAAI;AAAA,IACvD,OAAO;AACN,cAAQ,IAAI,yCAAyC;AAAA,IACtD;AAAA,EACD;AAIA,WAAS,YAAYC,UAAyB;AAC7C,UAAM,IAAcA,SAAQ,KAAK,MAAM,GAAG;AAC1C,UAAM,UAAU,CAAC,EAAE,CAAC,GAAG,KAAK,aAAa,GAAG,KAAK,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE;AAC9D,WAAO;AAAA,EACR;AAIA,WAAS,eAAuB;AAC/B,UAAM,IAAI,oBAAI,KAAK;AACnB,UAAM,OAAO,EAAE,YAAY,IAAI;AAC/B,UAAM,SAAS,EAAE,SAAS,IAAI,GAAG,SAAS,EAAE,SAAS,GAAG,GAAG;AAC3D,UAAM,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAClD,WAAO,GAAG,IAAI,GAAG,KAAK,GAAG,GAAG;AAAA,EAC7B;AACD;",
  "names": ["fs", "fileObj"]
}
