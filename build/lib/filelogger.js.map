{
  "version": 3,
  "sources": ["../../src/lib/filelogger.ts"],
  "sourcesContent": ["//  ======  File Logging   ======\n// writeLog( fileHandle, \"Text\" );\n// fileHandle = { path: './logs/airquality', file: 'logs.txt' };\n\nimport { promises as fs } from 'fs';\n//\ninterface Logger {\n    path: string;\n    file: string;\n}\n//\nexport async function writeLog(fileObj: Logger, logEntry: string): Promise<void> {\n    // Get the current date and time\n    const now = new Date();\n    const dateTime = now.toLocaleString('fr-CH'); // best format for log-entrys\n    // Format the log entry\n    const data = `${dateTime}\\t${logEntry}\\n`;\n    appendDataToFile(fileObj, data);\n}\n\nasync function appendDataToFile(fileObj: Logger, data: string): Promise<void> {\n    //console.log(`(f) checkDirectory ${JSON.stringify(fileObj)}`);\n    if (!fileObj.path.endsWith('/')) {\n        fileObj.path += '/';\n        //console.log(`\"/\" wurde an ${fileObj.path} angef\u00FCgt.`);\n    }\n    //\n    try {\n        // \u00DCberpr\u00FCfen und Verzeichnis erstellen, falls es nicht existiert\n        await fs.mkdir(fileObj.path, { recursive: true });\n        // Daten an die Datei anh\u00E4ngen\n        const filename = fileObj.path + dynFilename(fileObj); //fileObj.file;\n        //console.log(`Filename: ${filename}`);\n        await fs.appendFile(filename, data);\n        console.log(`Daten wurden erfolgreich an die Datei ${filename} angeh\u00E4ngt.`);\n    } catch (error: any) {\n        if (error.code === 'EACCES') {\n            console.log('Zugriffsfehler: Sie haben keine Berechtigung zum Anh\u00E4ngen von Daten an die Datei.');\n        } else if (error.code === 'ENOENT') {\n            console.log(`Datei oder Verzeichnis nicht gefunden: ${error.path}`);\n        } else if (error.code === 'ENOTDIR') {\n            console.log(`Pfad ist kein Verzeichnis: ${error.path}`);\n        } else {\n            console.log('Ein unbekannter Fehler ist aufgetreten:');\n        }\n    }\n    //console.log('Fertig');\n    //__________________________\n    // Dynamic filename for logfiles\n    function dynFilename(fileObj: Logger): string {\n        const f: string[] = fileObj.file.split('.');\n        const dynFile = [f[0], '_', logDate4File(), '.', f[1]].join('');\n        return dynFile;\n    }\n    //\n    //__________________________\n    // Format date for logfiles\n    function logDate4File(): string {\n        const d = new Date();\n        const year = d.getFullYear() - 2000;\n        const month = (d.getMonth() + 1).toString().padStart(2, '0');\n        const day = d.getDate().toString().padStart(2, '0');\n        return `${year}${month}${day}`;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,gBAA+B;AAO/B,eAAsB,SAAS,SAAiB,UAAiC;AAE7E,QAAM,MAAM,oBAAI,KAAK;AACrB,QAAM,WAAW,IAAI,eAAe,OAAO;AAE3C,QAAM,OAAO,GAAG,QAAQ,IAAK,QAAQ;AAAA;AACrC,mBAAiB,SAAS,IAAI;AAClC;AAEA,eAAe,iBAAiB,SAAiB,MAA6B;AAE1E,MAAI,CAAC,QAAQ,KAAK,SAAS,GAAG,GAAG;AAC7B,YAAQ,QAAQ;AAAA,EAEpB;AAEA,MAAI;AAEA,UAAM,UAAAA,SAAG,MAAM,QAAQ,MAAM,EAAE,WAAW,KAAK,CAAC;AAEhD,UAAM,WAAW,QAAQ,OAAO,YAAY,OAAO;AAEnD,UAAM,UAAAA,SAAG,WAAW,UAAU,IAAI;AAClC,YAAQ,IAAI,yCAAyC,QAAQ,gBAAa;AAAA,EAC9E,SAAS,OAAY;AACjB,QAAI,MAAM,SAAS,UAAU;AACzB,cAAQ,IAAI,sFAAmF;AAAA,IACnG,WAAW,MAAM,SAAS,UAAU;AAChC,cAAQ,IAAI,0CAA0C,MAAM,IAAI,EAAE;AAAA,IACtE,WAAW,MAAM,SAAS,WAAW;AACjC,cAAQ,IAAI,8BAA8B,MAAM,IAAI,EAAE;AAAA,IAC1D,OAAO;AACH,cAAQ,IAAI,yCAAyC;AAAA,IACzD;AAAA,EACJ;AAIA,WAAS,YAAYC,UAAyB;AAC1C,UAAM,IAAcA,SAAQ,KAAK,MAAM,GAAG;AAC1C,UAAM,UAAU,CAAC,EAAE,CAAC,GAAG,KAAK,aAAa,GAAG,KAAK,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE;AAC9D,WAAO;AAAA,EACX;AAIA,WAAS,eAAuB;AAC5B,UAAM,IAAI,oBAAI,KAAK;AACnB,UAAM,OAAO,EAAE,YAAY,IAAI;AAC/B,UAAM,SAAS,EAAE,SAAS,IAAI,GAAG,SAAS,EAAE,SAAS,GAAG,GAAG;AAC3D,UAAM,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAClD,WAAO,GAAG,IAAI,GAAG,KAAK,GAAG,GAAG;AAAA,EAChC;AACJ;",
  "names": ["fs", "fileObj"]
}
