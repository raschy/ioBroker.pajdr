{
  "version": 3,
  "sources": ["../../src/lib/utils.ts"],
  "sourcesContent": ["// utils.ts\n\ntype TranslatedName = string | { en: string; [key: string]: string };\n\nexport interface CreateStructuredStateOptions {\n\tdeviceName?: TranslatedName;\n\tchannelId?: string;\n\tchannelName?: TranslatedName;\n\tstateName?: TranslatedName;\n\trole?: string;\n\ttype?: ioBroker.CommonType;\n\tunit?: string;\n}\nexport interface CreateStructuredWritableOptions {\n\tdeviceName?: TranslatedName;\n\tchannelId?: string;\n\tchannelName?: TranslatedName;\n\tstateName?: TranslatedName;\n\trole?: string;\n\ttype?: ioBroker.CommonType;\n\tunit?: string;\n\tq?: number;\n}\n\n// ID-Bereinigung\nexport function sanitizeId(name: string): string {\n\treturn name\n\t\t.normalize(\"NFD\")\n\t\t.replace(/[\\u0300-\\u036f]/g, \"\")\n\t\t.replace(/[^\\w\\d-_]/g, \"_\")\n\t\t.replace(/_+/g, \"_\")\n\t\t.replace(/^_+|_+$/g, \"\")\n\t\t.toLowerCase();\n}\n\n// Namen absichern\nexport function ensureTranslatedName(\n\tname?: string | { [lang: string]: string },\n\tfallback?: string\n): string | { [lang: string]: string; en: string } {\n\tif (!name && fallback) return fallback;\n\n\tif (typeof name === \"string\") {\n\t\treturn name;\n\t}\n\n\tif (typeof name === \"object\") {\n\t\t// Stelle sicher, dass 'en' gesetzt ist \u2013 ggf. mit fallback\n\t\treturn {\n\t\t\t...name,\n\t\t\ten: name.en ?? fallback ?? \"unknown\"\n\t\t};\n\t}\n\n\treturn fallback ?? \"unknown\";\n}\n\n//\t###########################\n\nexport async function createStructuredState(\n\tadapter: ioBroker.Adapter,\n\tdeviceId: string,\n\tstateId: string,\n\tvalue: ioBroker.StateValue,\n\toptions?: CreateStructuredStateOptions\n): Promise<void> {\n\tconst {\n\t\tdeviceName,\n\t\tchannelId,\n\t\tchannelName,\n\t\tstateName,\n\t\trole = \"state\",\n\t\ttype = typeof value as ioBroker.CommonType,\n\t\tunit\n\t} = options ?? {};\n\n\tconst devicePath = deviceId;\n\tconst channelPath = channelId ? `${devicePath}.${channelId}` : undefined;\n\tconst statePath = channelPath ? `${channelPath}.${stateId}` : `${devicePath}.${stateId}`;\n\n\t// Device\n\tawait adapter.setObjectNotExistsAsync(devicePath, {\n\t\ttype: \"device\",\n\t\tcommon: {\n\t\t\tname: ensureTranslatedName(deviceName, deviceId)\n\t\t},\n\t\tnative: {}\n\t});\n\n\t// Channel (optional)\n\tif (channelPath) {\n\t\tawait adapter.setObjectNotExistsAsync(channelPath, {\n\t\t\ttype: \"channel\",\n\t\t\tcommon: {\n\t\t\t\tname: ensureTranslatedName(channelName, channelId!)\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\t}\n\n\t// State\n\tawait adapter.setObjectNotExistsAsync(statePath, {\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: ensureTranslatedName(stateName, stateId),\n\t\t\trole,\n\t\t\ttype,\n\t\t\tunit,\n\t\t\tread: true,\n\t\t\twrite: false\n\t\t},\n\t\tnative: {}\n\t});\n\n\tawait adapter.setState(statePath, { val: value, ack: true });\n}\n\nexport async function createStructuredWritableState(\n\tadapter: ioBroker.Adapter,\n\tdeviceId: string,\n\tstateId: string,\n\tvalue: ioBroker.StateValue,\n\toptions?: CreateStructuredWritableOptions\n\t): Promise<void> {\n\tconst {\n\t\tdeviceName,\n\t\tchannelId,\n\t\tchannelName,\n\t\tstateName,\n\t\trole = \"state\",\n\t\ttype = typeof value as ioBroker.CommonType,\n\t\tunit,\n\t\tq\n\t} = options ?? {};\n\n\tconst devicePath = deviceId;\n\tconst channelPath = channelId ? `${devicePath}.${channelId}` : undefined;\n\tconst statePath = channelPath ? `${channelPath}.${stateId}` : `${devicePath}.${stateId}`;\n\n\t// Device\n\tawait adapter.setObjectNotExistsAsync(devicePath, {\n\t\ttype: \"device\",\n\t\tcommon: {\n\t\t\tname: ensureTranslatedName(deviceName, deviceId)\n\t\t},\n\t\tnative: {}\n\t});\n\n\t// Channel (optional)\n\tif (channelPath) {\n\t\tawait adapter.setObjectNotExistsAsync(channelPath, {\n\t\t\ttype: \"channel\",\n\t\t\tcommon: {\n\t\t\t\tname: ensureTranslatedName(channelName, channelId!)\n\t\t\t},\n\t\t\tnative: {}\n\t\t});\n\t}\n\n\t// State (writeable)\n\tawait adapter.setObjectNotExistsAsync(statePath, {\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: ensureTranslatedName(stateName, stateId),\n\t\t\trole,\n\t\t\ttype,\n\t\t\tunit,\n\t\t\tread: true,\n\t\t\twrite: true\n\t\t},\n\t\tnative: {}\n\t});\n\t//await adapter.setState(statePath, { val: value, ack: false, q: q !== undefined ? q : undefined } as ioBroker.State);\n\n\tconst state: Pick<ioBroker.State, \"val\" | \"ack\"> & Partial<Pick<ioBroker.State, \"q\">> = {\n\t\tval: value,\n\t\tack: false\n\t\t};\n\n\t\tif (q !== undefined) {\n\t\t\tstate.q = q as ioBroker.State[\"q\"];\n\t\t}\n\t\t\n\tawait adapter.setState(statePath, state);\n}\n\n//\t###########################\n\n// \uD83D\uDD27 Device anlegen\nexport async function createDevice(\n\tadapter: ioBroker.Adapter,\n\tdeviceId: string,\n\tname?: string | { [lang: string]: string }\n): Promise<string> {\n\tconst id = sanitizeId(deviceId);\n\tawait adapter.setObjectNotExistsAsync(id, {\n\t\ttype: \"device\",\n\t\tcommon: {\n\t\t\tname: ensureTranslatedName(name, id)\n\t\t},\n\t\tnative: {}\n\t});\n\treturn id;\n}\n\n// \uD83D\uDD27 Channel anlegen\nexport async function createChannel(\n\tadapter: ioBroker.Adapter,\n\tdeviceId: string,\n\tchannelId: string,\n\tname?: string | { [lang: string]: string }\n): Promise<string> {\n\tconst devId = sanitizeId(deviceId);\n\tconst chId = sanitizeId(channelId);\n\tconst fullId = `${devId}.${chId}`;\n\tawait adapter.setObjectNotExistsAsync(fullId, {\n\t\ttype: \"channel\",\n\t\tcommon: {\n\t\t\tname: ensureTranslatedName(name, chId)\n\t\t},\n\t\tnative: {}\n\t});\n\treturn fullId;\n}\n\n// \uD83D\uDD27 Folder anlegen\nexport async function createFolder(\n\tadapter: ioBroker.Adapter,\n\tdeviceId: string,\n\tfolderId: string,\n\tname?: string | { [lang: string]: string }\n): Promise<string> {\n\tconst devId = sanitizeId(deviceId);\n\tconst fId = sanitizeId(folderId);\n\tconst fullId = `${devId}.${fId}`;\n\tawait adapter.setObjectNotExistsAsync(fullId, {\n\t\ttype: \"folder\",\n\t\tcommon: {\n\t\t\tname: ensureTranslatedName(name, fId)\n\t\t},\n\t\tnative: {}\n\t});\n\treturn fullId;\n}\n\n// \uD83D\uDD27 State anlegen + schreiben\nexport async function createWritableState(\n\tadapter: ioBroker.Adapter,\n\tfullPath: string, // z.\u202FB. \"device.channel.state\"\n\tstateId: string,\n\tvalue: ioBroker.StateValue,\n\toptions?: {\n\t\tname?: string | { [lang: string]: string };\n\t\trole?: string;\n\t\ttype?: ioBroker.CommonType;\n\t\tunit?: string;\n\t\tq?: ioBroker.State[\"q\"];\n\t}\n): Promise<void> {\n\tconst {\n\t\tname,\n\t\trole = \"state\",\n\t\ttype = typeof value as ioBroker.CommonType,\n\t\tunit,\n\t\tq\n\t} = options ?? {};\n\n\tconst stId = sanitizeId(stateId);\n\tconst fullStatePath = `${fullPath}.${stId}`;\n\n\tawait adapter.setObjectNotExistsAsync(fullStatePath, {\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: ensureTranslatedName(name, stId),\n\t\t\trole,\n\t\t\ttype,\n\t\t\tunit,\n\t\t\tread: true,\n\t\t\twrite: true\n\t\t},\n\t\tnative: {}\n\t});\n\n\tconst state: Pick<ioBroker.State, \"val\" | \"ack\"> & Partial<Pick<ioBroker.State, \"q\">> = {\n\t\tval: value,\n\t\tack: false\n\t};\n\n\tif (q !== undefined) {\n\t\tstate.q = q as ioBroker.State[\"q\"];\n\t}\n\n\tawait adapter.setState(fullStatePath, state);\n}\n\n// \uD83D\uDD27 State anlegen, schreiben und best\u00E4tigen\nexport async function createState(\n\tadapter: ioBroker.Adapter,\n\tfullPath: string, // z.\u202FB. \"device.channel.state\"\n\tstateId: string,\n\tvalue: ioBroker.StateValue,\n\toptions?: {\n\t\tname?: string | { [lang: string]: string };\n\t\trole?: string;\n\t\ttype?: ioBroker.CommonType;\n\t\tunit?: string;\n\t\tq?: ioBroker.State[\"q\"];\n\t}\n): Promise<void> {\n\tconst {\n\t\tname,\n\t\trole = \"state\",\n\t\ttype = typeof value as ioBroker.CommonType,\n\t\tunit,\n\t\tq\n\t} = options ?? {};\n\n\tconst stId = sanitizeId(stateId);\n\tconst fullStatePath = `${fullPath}.${stId}`;\n\n\tawait adapter.setObjectNotExistsAsync(fullStatePath, {\n\t\ttype: \"state\",\n\t\tcommon: {\n\t\t\tname: ensureTranslatedName(name, stId),\n\t\t\trole,\n\t\t\ttype,\n\t\t\tunit,\n\t\t\tread: true,\n\t\t\twrite: false\n\t\t},\n\t\tnative: {}\n\t});\n\n\tconst state: Pick<ioBroker.State, \"val\" | \"ack\"> & Partial<Pick<ioBroker.State, \"q\">> = {\n\t\tval: value,\n\t\tack: true\n\t};\n\n\tif (q !== undefined) {\n\t\tstate.q = q as ioBroker.State[\"q\"];\n\t}\n\n\tawait adapter.setState(fullStatePath, state);\n}\n"],
  "mappings": "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",
  "names": []
}
