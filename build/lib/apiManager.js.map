{
  "version": 3,
  "sources": ["../../src/lib/apiManager.ts"],
  "sourcesContent": ["\nexport class ApiManager {\n\tprivate tokenManager: any;\n\tprivate baseUrl: string = 'https://connect.paj-gps.de/api/v1/';\n\n\tconstructor(\n\t\tprivate readonly adapter: ioBroker.Adapter,\n\t\ttokenManager: any\n\t) {\n\t\tthis.tokenManager = tokenManager;\n\t}\n\n\t/**\n\t * @description Get Customer Data (explicit User-ID)\n\t * @returns {Promise<number>} The User-ID of the customer\n\t */\n\tasync getCustomer(): Promise<number> {\n\t\tconst url: string = `${this.baseUrl}customer`;\n\t\tthis.adapter.log.debug(`[getCustomer] URL: ${url}`);\n\t\tconst token: string = await this.tokenManager.getAccessToken();\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\t\t\t//console.log('RESPONSE: ', response);\n\t\t\t//console.log('Status: ', response.status);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getCustomer] Failed to retrieve data: ${response.statusText}`);\n\t\t\t}\n\n\t\t\tconst raw: CustomerRaw = (await response.json()) as CustomerRaw;\n\t\t\t//console.log('DATA getCustomer: ', raw);\n\t\t\tconst dataSuccess: CustomerData = raw.success;\n\t\t\t//console.log('SUCCESS', dataSuccess);\n\t\t\tconst userId: number = dataSuccess.id;\n\t\t\tthis.adapter.log.info(`[getCustomer] User ID: ${userId}`);\n\t\t\treturn userId;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tthis.adapter.log.error('[getCustomer] Error: ' + error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tthis.adapter.log.error('[getCustomer] Unknown error: ' + error);\n\t\t\t\tthrow new Error('Unknown error occurred');\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getDevice(): Promise<DeviceData[]> {\n\t\tconst url: string = `${this.baseUrl}device`;\n\t\tthis.adapter.log.debug(`[getDevice] URL: ${url}`);\n\t\tconst token: string = await this.tokenManager.getAccessToken();\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\t\t\t//console.log('RESPONSE: ', response);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getDevice] Failed to retrieve data: ${response.statusText}`);\n\t\t\t}\n\n\t\t\tconst raw = await response.json() as DeviceRaw;\n\t\t\t//console.log('[getDevice] Raw: ', raw);\n\t\t\tif (!raw.success || !Array.isArray(raw.success)) {\n\t\t\t\tthrow new Error('[getDevice] Invalid response format: success is not an array');\n\t\t\t}\n\t\t\tconsole.log('[getDevice] Count: ', raw.number_of_records);\n\t\t\t//\n\t\t\tif (raw.number_of_records === 0) {\n\t\t\t\tthis.adapter.log.warn('[getDevice] No devices found');\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\t//\n\t\t\tconst deviceData: DeviceData[] = raw.success;\n\t\t\treturn deviceData;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getDevice] Error:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getDevice] Unknown error:', error);\n\t\t\t\tthrow new Error('Unknown error occurred');\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getCarDeviceData(): Promise<CarData[]> {\n\t\tconst url: string = `${this.baseUrl}sdevice/car`;\n\t\tthis.adapter.log.debug(`[getCarDeviceData] URL: ${url}`);\n\t\tconst token: string = await this.tokenManager.getAccessToken();\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getCarDeviceData] Failed to retrieve data: ${response.statusText}`);\n\t\t\t}\n\n\t\t\tconst data: CarDataRaw = (await response.json()) as CarDataRaw;\n\t\t\t//console.log('RAW', data);\n\t\t\tconst dataSuccess: CarData[] = data.success;\n\t\t\t//console.log('SUCCESS', dataSuccess);\n\t\t\treturn dataSuccess;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getCarDeviceData] Error:', error.message);\n\t\t\t\tthrow error; // Rethrow error to inform caller\n\t\t\t} else {\n\t\t\t\tconsole.error('[getCarDeviceData] Unknown error:', error);\n\t\t\t\tthrow new Error('Unknown error occurred');\n\t\t\t}\n\t\t}\n\t}\n\n}\t"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACO,MAAM,WAAW;AAAA,EAIvB,YACkB,SACjB,cACC;AAFgB;AAGjB,SAAK,eAAe;AAAA,EACrB;AAAA,EARQ;AAAA,EACA,UAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,EAa1B,MAAM,cAA+B;AACpC,UAAM,MAAc,GAAG,KAAK,OAAO;AACnC,SAAK,QAAQ,IAAI,MAAM,sBAAsB,GAAG,EAAE;AAClD,UAAM,QAAgB,MAAM,KAAK,aAAa,eAAe;AAE7D,QAAI;AACH,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QACjC,QAAQ;AAAA,QACR,SAAS;AAAA,UACR,eAAe,UAAU,KAAK;AAAA,UAC9B,gBAAgB;AAAA,QACjB;AAAA,MACD,CAAC;AAID,UAAI,CAAC,SAAS,IAAI;AACjB,cAAM,IAAI,MAAM,0CAA0C,SAAS,UAAU,EAAE;AAAA,MAChF;AAEA,YAAM,MAAoB,MAAM,SAAS,KAAK;AAE9C,YAAM,cAA4B,IAAI;AAEtC,YAAM,SAAiB,YAAY;AACnC,WAAK,QAAQ,IAAI,KAAK,0BAA0B,MAAM,EAAE;AACxD,aAAO;AAAA,IACR,SAAS,OAAgB;AACxB,UAAI,iBAAiB,OAAO;AAC3B,aAAK,QAAQ,IAAI,MAAM,0BAA0B,MAAM,OAAO;AAC9D,cAAM;AAAA,MACP,OAAO;AACN,aAAK,QAAQ,IAAI,MAAM,kCAAkC,KAAK;AAC9D,cAAM,IAAI,MAAM,wBAAwB;AAAA,MACzC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,YAAmC;AACxC,UAAM,MAAc,GAAG,KAAK,OAAO;AACnC,SAAK,QAAQ,IAAI,MAAM,oBAAoB,GAAG,EAAE;AAChD,UAAM,QAAgB,MAAM,KAAK,aAAa,eAAe;AAE7D,QAAI;AACH,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QACjC,QAAQ;AAAA,QACR,SAAS;AAAA,UACR,eAAe,UAAU,KAAK;AAAA,UAC9B,gBAAgB;AAAA,QACjB;AAAA,MACD,CAAC;AAGD,UAAI,CAAC,SAAS,IAAI;AACjB,cAAM,IAAI,MAAM,wCAAwC,SAAS,UAAU,EAAE;AAAA,MAC9E;AAEA,YAAM,MAAM,MAAM,SAAS,KAAK;AAEhC,UAAI,CAAC,IAAI,WAAW,CAAC,MAAM,QAAQ,IAAI,OAAO,GAAG;AAChD,cAAM,IAAI,MAAM,8DAA8D;AAAA,MAC/E;AACA,cAAQ,IAAI,uBAAuB,IAAI,iBAAiB;AAExD,UAAI,IAAI,sBAAsB,GAAG;AAChC,aAAK,QAAQ,IAAI,KAAK,8BAA8B;AACpD,eAAO,CAAC;AAAA,MACT;AAEA,YAAM,aAA2B,IAAI;AACrC,aAAO;AAAA,IACR,SAAS,OAAgB;AACxB,UAAI,iBAAiB,OAAO;AAC3B,gBAAQ,MAAM,sBAAsB,MAAM,OAAO;AACjD,cAAM;AAAA,MACP,OAAO;AACN,gBAAQ,MAAM,8BAA8B,KAAK;AACjD,cAAM,IAAI,MAAM,wBAAwB;AAAA,MACzC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,mBAAuC;AAC5C,UAAM,MAAc,GAAG,KAAK,OAAO;AACnC,SAAK,QAAQ,IAAI,MAAM,2BAA2B,GAAG,EAAE;AACvD,UAAM,QAAgB,MAAM,KAAK,aAAa,eAAe;AAE7D,QAAI;AACH,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QACjC,QAAQ;AAAA,QACR,SAAS;AAAA,UACR,eAAe,UAAU,KAAK;AAAA,UAC9B,gBAAgB;AAAA,QACjB;AAAA,MACD,CAAC;AAED,UAAI,CAAC,SAAS,IAAI;AACjB,cAAM,IAAI,MAAM,+CAA+C,SAAS,UAAU,EAAE;AAAA,MACrF;AAEA,YAAM,OAAoB,MAAM,SAAS,KAAK;AAE9C,YAAM,cAAyB,KAAK;AAEpC,aAAO;AAAA,IACR,SAAS,OAAgB;AACxB,UAAI,iBAAiB,OAAO;AAC3B,gBAAQ,MAAM,6BAA6B,MAAM,OAAO;AACxD,cAAM;AAAA,MACP,OAAO;AACN,gBAAQ,MAAM,qCAAqC,KAAK;AACxD,cAAM,IAAI,MAAM,wBAAwB;AAAA,MACzC;AAAA,IACD;AAAA,EACD;AAED;",
  "names": []
}
