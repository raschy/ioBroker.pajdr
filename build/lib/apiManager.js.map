{
  "version": 3,
  "sources": ["../../src/lib/apiManager.ts"],
  "sourcesContent": ["/**\n * @file ApiManager.ts\n * @description This file contains the ApiManager class which handles API requests to the Paj GPS service.\n * It includes methods to get customer data, device data, and car device data.\n */\nexport class ApiManager {\n\tprivate tokenManager: any;\n\tprivate baseUrl: string = 'https://connect.paj-gps.de/api/v1/';\n\n\t/**\n\t *\n\t * @param adapter The ioBroker adapter instance.\n\t * @description Initializes the ApiManager with the adapter and token manager.\n\t * @throws Will throw an error if the adapter is not provided.\n\t * @throws Will throw an error if the token manager is not provided.\n\t * @description The ioBroker adapter instance.\n\t * @param tokenManager any\n\t */\n\tconstructor(\n\t\tprivate readonly adapter: ioBroker.Adapter,\n\t\ttokenManager: any,\n\t) {\n\t\tthis.tokenManager = tokenManager;\n\t}\n\n\t/**\n\t * @description Get Customer Data (explicit User-ID)\n\t * @returns The User-ID of the customer\n\t */\n\tasync getCustomer(): Promise<number> {\n\t\tconst url = `${this.baseUrl}customer`;\n\t\tthis.adapter.log.debug(`[getCustomer] URL: ${url}`);\n\t\tconst token: string = await this.tokenManager.getAccessToken();\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\t\t\t//console.log('RESPONSE: ', response);\n\t\t\t//console.log('Status: ', response.status);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getCustomer] Failed to retrieve data: ${response.statusText}`);\n\t\t\t}\n\n\t\t\tconst raw: CustomerRaw = (await response.json()) as CustomerRaw;\n\t\t\t//console.log('DATA getCustomer: ', raw);\n\t\t\tconst dataSuccess: CustomerData = raw.success;\n\t\t\t//console.log('SUCCESS', dataSuccess);\n\t\t\tconst customerId: number = dataSuccess.id;\n\t\t\tthis.adapter.log.info(`[getCustomer] Customer ID: ${customerId}`);\n\t\t\treturn customerId;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tthis.adapter.log.error(`[getCustomer] Error: ${error.message}`);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconst errMsg =\n\t\t\t\t\ttypeof error === 'object' && error !== null && 'stack' in error\n\t\t\t\t\t\t? `[getCustomer] Unknown error: ${(error as { stack?: string }).stack}`\n\t\t\t\t\t\t: `[getCustomer] Unknown error: ${String(error)}`;\n\t\t\t\tthis.adapter.log.error(errMsg);\n\t\t\t\tthrow new Error('Unknown error occurred');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns DeviceData[]\n\t * @description Get Device Data\n\t */\n\tasync getDevice(): Promise<DeviceData[]> {\n\t\tconst url = `${this.baseUrl}device`;\n\t\tthis.adapter.log.debug(`[getDevice] URL: ${url}`);\n\t\tconst token: string = await this.tokenManager.getAccessToken();\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\t\t\t//console.log('RESPONSE: ', response);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getDevice] Failed to retrieve data: ${response.statusText}`);\n\t\t\t}\n\n\t\t\tconst raw = (await response.json()) as DeviceRaw;\n\t\t\t//console.log('[getDevice] Raw: ', raw);\n\t\t\tif (!raw.success || !Array.isArray(raw.success)) {\n\t\t\t\tthrow new Error('[getDevice] Invalid response format: success is not an array');\n\t\t\t}\n\t\t\t//console.log('[getDevice] Count: ', raw.number_of_records);\n\t\t\t//\n\t\t\tif (raw.number_of_records === 0) {\n\t\t\t\tthis.adapter.log.warn('[getDevice] No devices found');\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\t//\n\t\t\tconst deviceData: DeviceData[] = raw.success;\n\t\t\treturn deviceData;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getDevice] Error:', error.message);\n\t\t\t\tthrow error; // Fehler weiterwerfen, um den Aufrufer zu informieren\n\t\t\t} else {\n\t\t\t\tconsole.error('[getDevice] Unknown error:', error);\n\t\t\t\tthrow new Error('Unknown error occurred');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @returns CarData[]\n\t * @description Get Car Device Data\n\t */\n\tasync getCarDeviceData(): Promise<CarData[]> {\n\t\tconst url = `${this.baseUrl}sdevice/car`;\n\t\tthis.adapter.log.debug(`[getCarDeviceData] URL: ${url}`);\n\t\tconst token: string = await this.tokenManager.getAccessToken();\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getCarDeviceData] Failed to retrieve data: ${response.statusText}`);\n\t\t\t}\n\n\t\t\tconst data: CarDataRaw = (await response.json()) as CarDataRaw;\n\t\t\t//console.log('RAW', data);\n\t\t\tconst dataSuccess: CarData[] = data.success;\n\t\t\t//console.log('SUCCESS', dataSuccess);\n\t\t\treturn dataSuccess;\n\t\t} catch (error: unknown) {\n\t\t\tif (error instanceof Error) {\n\t\t\t\tconsole.error('[getCarDeviceData] Error:', error.message);\n\t\t\t\tthrow error; // Rethrow error to inform caller\n\t\t\t} else {\n\t\t\t\tconsole.error('[getCarDeviceData] Unknown error:', error);\n\t\t\t\tthrow new Error('Unknown error occurred');\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getAllLastPositions(deviceIDs: number[], fromLastPoint = false): Promise<Position[]> {\n\t\tconst url = `${this.baseUrl}trackerdata/getalllastpositions`;\n\t\tthis.adapter.log.debug(`[getAllLastPositions] URL: ${url}`);\n\n\t\tconst token: string = await this.tokenManager.getAccessToken();\n\n\t\ttry {\n\t\t\tconst payload = { deviceIDs, fromLastPoint };\n\n\t\t\tconst response = await fetch(url, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(payload),\n\t\t\t});\n\n\t\t\tthis.adapter.log.debug(`[getAllLastPositions] PayLoad: ${JSON.stringify(payload)}`);\n\t\t\tthis.adapter.log.debug(`[getAllLastPositions] Response: ${JSON.stringify(response)}`);\n\t\t\t//this.adapter.log.debug(`[getAllLastPositions] Response Body: ${JSON.stringify(await response.json())}`);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`[getAllLastPositions] Failed: ${response.status} ${response.statusText}`);\n\t\t\t}\n\n\t\t\tconst data = (await response.json()) as GetAllLastPositionsResponse;\n\n\t\t\tconsole.log(`[getAllLastPositions] DatA: ${JSON.stringify(data)}`);\n\n\t\t\t// Logs der Positionen\n\t\t\tfor (const pos of data.success) {\n\t\t\t\tthis.adapter.log.info(`Position ID: ${pos.id}, Latitude: ${pos.lat}, Longitude: ${pos.lng}`);\n\t\t\t}\n\n\t\t\treturn data.success;\n\t\t} catch (err: any) {\n\t\t\tthis.adapter.log.error(`[getAllLastPositions] Error: ${err.message}`);\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,MAAM,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAavB,YACkB,SACjB,cACC;AAFgB;AAZlB,SAAQ,UAAkB;AAezB,SAAK,eAAe;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,cAA+B;AACpC,UAAM,MAAM,GAAG,KAAK,OAAO;AAC3B,SAAK,QAAQ,IAAI,MAAM,sBAAsB,GAAG,EAAE;AAClD,UAAM,QAAgB,MAAM,KAAK,aAAa,eAAe;AAE7D,QAAI;AACH,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QACjC,QAAQ;AAAA,QACR,SAAS;AAAA,UACR,eAAe,UAAU,KAAK;AAAA,UAC9B,gBAAgB;AAAA,QACjB;AAAA,MACD,CAAC;AAID,UAAI,CAAC,SAAS,IAAI;AACjB,cAAM,IAAI,MAAM,0CAA0C,SAAS,UAAU,EAAE;AAAA,MAChF;AAEA,YAAM,MAAoB,MAAM,SAAS,KAAK;AAE9C,YAAM,cAA4B,IAAI;AAEtC,YAAM,aAAqB,YAAY;AACvC,WAAK,QAAQ,IAAI,KAAK,8BAA8B,UAAU,EAAE;AAChE,aAAO;AAAA,IACR,SAAS,OAAgB;AACxB,UAAI,iBAAiB,OAAO;AAC3B,aAAK,QAAQ,IAAI,MAAM,wBAAwB,MAAM,OAAO,EAAE;AAC9D,cAAM;AAAA,MACP,OAAO;AACN,cAAM,SACL,OAAO,UAAU,YAAY,UAAU,QAAQ,WAAW,QACvD,gCAAiC,MAA6B,KAAK,KACnE,gCAAgC,OAAO,KAAK,CAAC;AACjD,aAAK,QAAQ,IAAI,MAAM,MAAM;AAC7B,cAAM,IAAI,MAAM,wBAAwB;AAAA,MACzC;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,YAAmC;AACxC,UAAM,MAAM,GAAG,KAAK,OAAO;AAC3B,SAAK,QAAQ,IAAI,MAAM,oBAAoB,GAAG,EAAE;AAChD,UAAM,QAAgB,MAAM,KAAK,aAAa,eAAe;AAE7D,QAAI;AACH,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QACjC,QAAQ;AAAA,QACR,SAAS;AAAA,UACR,eAAe,UAAU,KAAK;AAAA,UAC9B,gBAAgB;AAAA,QACjB;AAAA,MACD,CAAC;AAGD,UAAI,CAAC,SAAS,IAAI;AACjB,cAAM,IAAI,MAAM,wCAAwC,SAAS,UAAU,EAAE;AAAA,MAC9E;AAEA,YAAM,MAAO,MAAM,SAAS,KAAK;AAEjC,UAAI,CAAC,IAAI,WAAW,CAAC,MAAM,QAAQ,IAAI,OAAO,GAAG;AAChD,cAAM,IAAI,MAAM,8DAA8D;AAAA,MAC/E;AAGA,UAAI,IAAI,sBAAsB,GAAG;AAChC,aAAK,QAAQ,IAAI,KAAK,8BAA8B;AACpD,eAAO,CAAC;AAAA,MACT;AAEA,YAAM,aAA2B,IAAI;AACrC,aAAO;AAAA,IACR,SAAS,OAAgB;AACxB,UAAI,iBAAiB,OAAO;AAC3B,gBAAQ,MAAM,sBAAsB,MAAM,OAAO;AACjD,cAAM;AAAA,MACP,OAAO;AACN,gBAAQ,MAAM,8BAA8B,KAAK;AACjD,cAAM,IAAI,MAAM,wBAAwB;AAAA,MACzC;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,mBAAuC;AAC5C,UAAM,MAAM,GAAG,KAAK,OAAO;AAC3B,SAAK,QAAQ,IAAI,MAAM,2BAA2B,GAAG,EAAE;AACvD,UAAM,QAAgB,MAAM,KAAK,aAAa,eAAe;AAE7D,QAAI;AACH,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QACjC,QAAQ;AAAA,QACR,SAAS;AAAA,UACR,eAAe,UAAU,KAAK;AAAA,UAC9B,gBAAgB;AAAA,QACjB;AAAA,MACD,CAAC;AAED,UAAI,CAAC,SAAS,IAAI;AACjB,cAAM,IAAI,MAAM,+CAA+C,SAAS,UAAU,EAAE;AAAA,MACrF;AAEA,YAAM,OAAoB,MAAM,SAAS,KAAK;AAE9C,YAAM,cAAyB,KAAK;AAEpC,aAAO;AAAA,IACR,SAAS,OAAgB;AACxB,UAAI,iBAAiB,OAAO;AAC3B,gBAAQ,MAAM,6BAA6B,MAAM,OAAO;AACxD,cAAM;AAAA,MACP,OAAO;AACN,gBAAQ,MAAM,qCAAqC,KAAK;AACxD,cAAM,IAAI,MAAM,wBAAwB;AAAA,MACzC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,oBAAoB,WAAqB,gBAAgB,OAA4B;AAC1F,UAAM,MAAM,GAAG,KAAK,OAAO;AAC3B,SAAK,QAAQ,IAAI,MAAM,8BAA8B,GAAG,EAAE;AAE1D,UAAM,QAAgB,MAAM,KAAK,aAAa,eAAe;AAE7D,QAAI;AACH,YAAM,UAAU,EAAE,WAAW,cAAc;AAE3C,YAAM,WAAW,MAAM,MAAM,KAAK;AAAA,QACjC,QAAQ;AAAA,QACR,SAAS;AAAA,UACR,eAAe,UAAU,KAAK;AAAA,UAC9B,gBAAgB;AAAA,QACjB;AAAA,QACA,MAAM,KAAK,UAAU,OAAO;AAAA,MAC7B,CAAC;AAED,WAAK,QAAQ,IAAI,MAAM,kCAAkC,KAAK,UAAU,OAAO,CAAC,EAAE;AAClF,WAAK,QAAQ,IAAI,MAAM,mCAAmC,KAAK,UAAU,QAAQ,CAAC,EAAE;AAGpF,UAAI,CAAC,SAAS,IAAI;AACjB,cAAM,IAAI,MAAM,iCAAiC,SAAS,MAAM,IAAI,SAAS,UAAU,EAAE;AAAA,MAC1F;AAEA,YAAM,OAAQ,MAAM,SAAS,KAAK;AAElC,cAAQ,IAAI,+BAA+B,KAAK,UAAU,IAAI,CAAC,EAAE;AAGjE,iBAAW,OAAO,KAAK,SAAS;AAC/B,aAAK,QAAQ,IAAI,KAAK,gBAAgB,IAAI,EAAE,eAAe,IAAI,GAAG,gBAAgB,IAAI,GAAG,EAAE;AAAA,MAC5F;AAEA,aAAO,KAAK;AAAA,IACb,SAAS,KAAU;AAClB,WAAK,QAAQ,IAAI,MAAM,gCAAgC,IAAI,OAAO,EAAE;AACpE,YAAM;AAAA,IACP;AAAA,EACD;AACD;",
  "names": []
}
